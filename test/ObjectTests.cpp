#include "gtest/gtest.h"

#include "HDMapTests.hpp"
#include "OpenDRIVE/utils/Projector.hpp"

namespace opendrive {
    namespace tests {

        /**
         * Base setup for the geometry calculation tests.
         */
        class ObjectTests : public HDMapTests {
        public:
            /**
             * @destrcutor
             */
            ~ObjectTests() override = default;

        protected:

        };

        /**
         * Tests that calculating the objects world position from the s and t coordinates works.
         */
        TEST_F(ObjectTests, testObjectWorldPositions) {
            std::vector<Vector> expected = {
                    {6.92752815743200015277e+05, 5.33908762334284279495e+06, 5.55629042106318593142e+02},
                    {6.92751161325081600808e+05, 5.33909765915271546692e+06, 5.55379293276263865664e+02},
                    {6.92747748698621289805e+05, 5.33909678282888885587e+06, 5.55390701681538985213e+02},
                    {6.92606676590725546703e+05, 5.33910691727174911648e+06, 5.50700788033543858546e+02},
                    {6.92605936263353331015e+05, 5.33911222002448793501e+06, 5.50855064582608520141e+02},
                    {6.92616722412780509330e+05, 5.33911394294953905046e+06, 5.50555352741144588435e+02},
                    {6.92612352274155360647e+05, 5.33911510528160817921e+06, 5.50713893889218752520e+02},
                    {6.92751806624239194207e+05, 5.33908573604378942400e+06, 5.55660124517692111112e+02},
                    {6.92708349062337307259e+05, 5.33902845461071748286e+06, 5.55353931313710631912e+02},
                    {6.92701354525347356685e+05, 5.33902158906719740480e+06, 5.55283094850393354136e+02},
                    {6.92696974047571420670e+05, 5.33901916818122565746e+06, 5.55201728674097125804e+02},
                    {6.92685416537484037690e+05, 5.33901259803893510252e+06, 5.54986511637555850029e+02},
                    {6.92674729752844665200e+05, 5.33900847661753091961e+06, 5.54764415887459222176e+02},
                    {6.92663745573183521628e+05, 5.33900538014245778322e+06, 5.54565395019241805130e+02},
                    {6.92627908561217365786e+05, 5.33900764233390986919e+06, 5.53622818389663393646e+02},
                    {6.92621504221358103678e+05, 5.33900999713717587292e+06, 5.53398803885301617811e+02},
                    {6.92611674901380087249e+05, 5.33901597597509156913e+06, 5.53028907085744776850e+02},
                    {6.92715411180174676701e+05, 5.33903639781792741269e+06, 5.55435984065390925934e+02},
                    {6.92711465647067176178e+05, 5.33903282638295181096e+06, 5.55367709046998470512e+02},
                    {6.92703109791771508753e+05, 5.33902282555785682052e+06, 5.55309843257786610593e+02},
                    {6.92699460918574943207e+05, 5.33902092462930455804e+06, 5.55239560465854424365e+02},
                    {6.92686350812073564157e+05, 5.33901381162018980831e+06, 5.54983376077727257325e+02},
                    {6.92676977337832329795e+05, 5.33901042715993896127e+06, 5.54767261190704743967e+02},
                    {6.92668856890760944225e+05, 5.33900631287761311978e+06, 5.54669716416166920681e+02},
                    {6.92625243761863326654e+05, 5.33900896807541046292e+06, 5.53504956721107760131e+02},
                    {6.92692787940796464682e+05, 5.33901564974243100733e+06, 5.55150772482628212856e+02},
                    {6.92666741499418276362e+05, 5.33900617381537426263e+06, 5.54615097623685073813e+02},
                    {6.92615633566809119657e+05, 5.33901228463342692703e+06, 5.53232765161729844294e+02},
                    {6.92604712519053369761e+05, 5.33902262990766298026e+06, 5.52725805303182596617e+02},
                    {6.92717033156775054522e+05, 5.33903568337144888937e+06, 5.55501490937052381014e+02},
                    {6.92640507578698452562e+05, 5.33908862505519855767e+06, 5.48858631261344385166e+02},
                    {6.92594020567854749970e+05, 5.33904623808654583991e+06, 1.10380040072775909721e+03},
                    {6.92761309571860590950e+05, 5.33909902109804749489e+06, 1.11101157490199284439e+03},
                    {6.92873939773715101182e+05, 5.33929424015508778393e+06, 5.51678374362740669312e+02},
                    {6.92739965471938601695e+05, 5.33905853249801788479e+06, 5.56322094808340125383e+02},
                    {6.92644584093946614303e+05, 5.33900101571922283620e+06, 5.54731926972622318317e+02},
                    {6.92847919082914362662e+05, 5.33926466017213370651e+06, 5.50939525460296408710e+02},
                    {6.92803042867243755609e+05, 5.33917801201148796827e+06, 5.53488229905362459249e+02},
                    {6.92788302361827692948e+05, 5.33914951610617153347e+06, 5.54323689601381374814e+02},
                    {6.92760643188071786426e+05, 5.33909571294584684074e+06, 5.55502064406534373120e+02},
                    {6.92769047732471721247e+05, 5.33908967894155345857e+06, 5.55893419499305650788e+02},
                    {6.92741101515630143695e+05, 5.33906051792388595641e+06, 5.55849077234960304850e+02},
                    {6.92747976687531103380e+05, 5.33905190830403473228e+06, 5.56260670820379232282e+02},
                    {6.92736812390750972554e+05, 5.33903662906518951058e+06, 5.56327368063818653354e+02},
                    {6.92715324102841783315e+05, 5.33902842880185693502e+06, 5.55576027112614269754e+02},
                    {6.92706243606220115907e+05, 5.33902065704503003508e+06, 5.55452464401139764050e+02},
                    {6.92696334554323111661e+05, 5.33901396993821766227e+06, 5.55304261469334960566e+02},
                    {6.92711606097710086033e+05, 5.33901126169955078512e+06, 5.56173192296138722668e+02},
                    {6.92698739124026615173e+05, 5.33900293781438097358e+06, 5.56044418034137720497e+02},
                    {6.92685544116096454673e+05, 5.33900846095835138112e+06, 5.55116901412681272632e+02},
                    {6.92685014213815564290e+05, 5.33899662877869606018e+06, 5.55936447479638559344e+02},
                    {6.92674259387037949637e+05, 5.33900454914533998817e+06, 5.54898377530022912651e+02},
                    {6.92662756505107972771e+05, 5.33900171105398610234e+06, 5.54690912295696875844e+02},
                    {6.92671327305635553785e+05, 5.33899263406360708177e+06, 5.55735809343505025026e+02},
                    {6.92657285123253008351e+05, 5.33899044976968318224e+06, 5.55458309230874647255e+02},
                    {6.92642942835270310752e+05, 5.33899021158938575536e+06, 5.55150986901302189835e+02},
                    {6.92634989536295644939e+05, 5.33900192066369485110e+06, 5.54051855305653702999e+02},
                    {6.92623636180429602973e+05, 5.33900538981945719570e+06, 5.53680821009621809026e+02},
                    {6.92628959429247071967e+05, 5.33899256407796125859e+06, 5.54828298967208638715e+02},
                    {6.92613233619208331220e+05, 5.33901125570971705019e+06, 5.53291136512195748764e+02},
                    {6.92616229870136245154e+05, 5.33899721338332537562e+06, 5.54516519114979701044e+02},
                    {6.92604325109470519237e+05, 5.33900483979650400579e+06, 5.54130211795181480738e+02},
                    {6.92604484393795486540e+05, 5.33901933023611549288e+06, 5.52905277062930736065e+02},
                    {6.92595022033095825464e+05, 5.33901413371311035007e+06, 5.53719189247855297253e+02},
                    {6.92588189265818102285e+05, 5.33902528074961621314e+06, 5.53310743186140371108e+02},
                    {6.92598223417521920055e+05, 5.33902935703175514936e+06, 5.52466640413891241224e+02},
                    {6.92583655617993208580e+05, 5.33903884521444793791e+06, 5.52852669802464447457e+02},
                    {6.92582680862167384475e+05, 5.33905194957181345671e+06, 5.52319421711024801880e+02},
                    {6.92596238357931957580e+05, 5.33906806237447354943e+06, 5.50860070965645377328e+02},
                    {6.92586475513251731172e+05, 5.33907207760634925216e+06, 5.51705417618660476364e+02},
                    {6.92611872247700812295e+05, 5.33908878776261862367e+06, 5.49775066696283602141e+02},
                    {6.92648699601184925996e+05, 5.33909913130790460855e+06, 5.49420290704329431719e+02},
            };

            int i = 0;
            for (const auto &entry : roadHighwayExitSouth.getObjects()) {
                auto position = roadHighwayExitSouth.getWorldPosition<Object>(entry.first);
//                std::cout << "{" << position << "}," << std::endl;
                EXPECT_NEAR(position.getX(), expected[i].getX(), maxDifference);
                EXPECT_NEAR(position.getY(), expected[i].getY(), maxDifference);
                EXPECT_NEAR(position.getZ(), expected[i].getZ(), maxDifference);
                i++;
            }
        }


        /**
         * Tests that filtering the landmarks gives the correct objects.
         */
        TEST_F(ObjectTests, testFilterRelevantLandmarks) {
            const char *type = "pole";
            const char *name = "permanentDelineator";
            auto landmarks = roadHighwayExitSouth.filterObjects(type, name);
            ASSERT_EQ(landmarks.size(), 35);

            for (const auto &entry : landmarks) {
                ASSERT_STREQ(entry.second.getType().c_str(), type);
                ASSERT_STREQ(entry.second.getName().c_str(), name);
            }
        }
    }// namespace tests
}// namespace opendrive
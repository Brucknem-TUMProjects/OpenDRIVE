#include "gtest/gtest.h"

#include "HDMapTests.hpp"
#include "Projector.hpp"

namespace opendrive {
    namespace tests {

        /**
         * Base setup for the geometry calculation tests.
         */
        class ObjectTests : public HDMapTests {
        public:
            /**
             * @destrcutor
             */
            ~ObjectTests() override = default;

        protected:

        };

        /**
         * Tests that calculating the objects world position from the s and t coordinates works.
         */
        TEST_F(ObjectTests, testObjectWorldPositions) {
            std::vector<Vector> expected = {
                    {6.92752815334944054484e+05, 5.33908762355754431337e+06, 5.55746477883019792898e+02},
                    {6.92751159610851667821e+05, 5.33909766003691125661e+06, 5.55651025341902482069e+02},
                    {6.92747747012729523703e+05, 5.33909678369957208633e+06, 5.55679514976156610828e+02},
                    {6.92606670025356346741e+05, 5.33910692773524764925e+06, 5.49866003390345213120e+02},
                    {6.92605927983836969361e+05, 5.33911223419970367104e+06, 5.49821952536739331663e+02},
                    {6.92616717239808407612e+05, 5.33911395611079968512e+06, 5.49636267475958902651e+02},
                    {6.92612345596486818977e+05, 5.33911511997541133314e+06, 5.49694333492346459025e+02},
                    {6.92751806277860887349e+05, 5.33908573622745834291e+06, 5.55769551183327394028e+02},
                    {6.92708345653580385260e+05, 5.33902845857952628285e+06, 5.55759207829092588327e+02},
                    {6.92701351957099395804e+05, 5.33902159267770219594e+06, 5.55658131636073562731e+02},
                    {6.92696971444703638554e+05, 5.33901917225036770105e+06, 5.55599191101851147323e+02},
                    {6.92685414023345801979e+05, 5.33901260353783890605e+06, 5.55415466016942218630e+02},
                    {6.92674727560219587758e+05, 5.33900848357521090657e+06, 5.55225401913597352177e+02},
                    {6.92663744320462457836e+05, 5.33900538701482955366e+06, 5.55005036034411205037e+02},
                    {6.92627910960599198006e+05, 5.33900764907198119909e+06, 5.54056361476496022078e+02},
                    {6.92621507523034815677e+05, 5.33901000352986901999e+06, 5.53832939102415025445e+02},
                    {6.92611679110954399221e+05, 5.33901598084743041545e+06, 5.53431493718696515316e+02},
                    {6.92715407174663618207e+05, 5.33903640168557316065e+06, 5.55849547876605470265e+02},
                    {6.92711461540265125223e+05, 5.33903283073205128312e+06, 5.55806544494414310975e+02},
                    {6.92703107160844025202e+05, 5.33902282909991592169e+06, 5.55681890660736030441e+02},
                    {6.92699458214027923532e+05, 5.33902092858742922544e+06, 5.55635876747060478920e+02},
                    {6.92686348050029017031e+05, 5.33901381743485853076e+06, 5.55436087235539389440e+02},
                    {6.92676974634140729904e+05, 5.33901043492024205625e+06, 5.55274067970399983096e+02},
                    {6.92668855261128512211e+05, 5.33900631961294263601e+06, 5.55109074058401461116e+02},
                    {6.92625246747370925732e+05, 5.33900897512352652848e+06, 5.53960078917005944277e+02},
                    {6.92692785663812304847e+05, 5.33901565377905126661e+06, 5.55529537187673213339e+02},
                    {6.92666739954255404882e+05, 5.33900618090976867825e+06, 5.55067932614343249043e+02},
                    {6.92615637052356731147e+05, 5.33901228971152845770e+06, 5.53621593614796665861e+02},
                    {6.92604716587599716149e+05, 5.33902263299907185137e+06, 5.53074146890123074627e+02},
                    {6.92717029906906653196e+05, 5.33903568647799268365e+06, 5.55854103166318623153e+02},
                    {6.92640507946828613058e+05, 5.33908861708461306989e+06, 5.49412694707478976852e+02},
                    {6.92594023774913628586e+05, 5.33904623837720789015e+06, 5.52032941868180159872e+02},
                    {6.92761308742391294800e+05, 5.33909902153412997723e+06, 5.55576956438942147543e+02},
                    {6.92873940505347680300e+05, 5.33929423977584857494e+06, 5.51164862995146222602e+02},
                    {6.92739964960081153549e+05, 5.33905853282474353909e+06, 5.55964413099481703284e+02},
                    {6.92644584281142568216e+05, 5.33900101910101249814e+06, 5.54558465374983484253e+02},
                    {6.92847917302528745495e+05, 5.33926466109169088304e+06, 5.51565537325437617255e+02},
                    {6.92803042171223787591e+05, 5.33917801237021759152e+06, 5.53679788966430237451e+02},
                    {6.92788301344167091884e+05, 5.33914951662305649370e+06, 5.54555973447473775195e+02},
                    {6.92760642662542290054e+05, 5.33909571321817766875e+06, 5.55618421201457408642e+02},
                    {6.92769048806918319315e+05, 5.33908967838669102639e+06, 5.55637277615549010079e+02},
                    {6.92741101011723163538e+05, 5.33906051823907438666e+06, 5.55959334740455119572e+02},
                    {6.92747977934567024931e+05, 5.33905190749900788069e+06, 5.55966308172031062895e+02},
                    {6.92736814542536390945e+05, 5.33903662736815772951e+06, 5.55933711075222390718e+02},
                    {6.92715322596461395733e+05, 5.33902843040289543569e+06, 5.55804795500509953854e+02},
                    {6.92706242322068079375e+05, 5.33902065873408503830e+06, 5.55694581938313035607e+02},
                    {6.92696333396803354844e+05, 5.33901397188560757786e+06, 5.55558419798171485127e+02},
                    {6.92711608893611235544e+05, 5.33901125793047156185e+06, 5.55681177688166712869e+02},
                    {6.92698741700205253437e+05, 5.33900293314181081951e+06, 5.55517014651009048976e+02},
                    {6.92685542942459927872e+05, 5.33900846364174038172e+06, 5.55391677234070925806e+02},
                    {6.92685016703978064470e+05, 5.33899662223655730486e+06, 5.55318768695825383475e+02},
                    {6.92674258345811744221e+05, 5.33900455265700072050e+06, 5.55196990612177160074e+02},
                    {6.92662755948701873422e+05, 5.33900171443992014974e+06, 5.54972188279992565185e+02},
                    {6.92671329004803090356e+05, 5.33899262679530680180e+06, 5.55095298762812149107e+02},
                    {6.92657285749710048549e+05, 5.33899044289744552225e+06, 5.54835281386405654303e+02},
                    {6.92642942399042076431e+05, 5.33899020515243057162e+06, 5.54535521300632126440e+02},
                    {6.92634990158038446680e+05, 5.33900192380138486624e+06, 5.54304066959923829927e+02},
                    {6.92623637586640776135e+05, 5.33900539312483556569e+06, 5.53957491798590467624e+02},
                    {6.92628957758259144612e+05, 5.33899255759995337576e+06, 5.54205760240714766951e+02},
                    {6.92613235810559592210e+05, 5.33901125872386991978e+06, 5.53575381200983201779e+02},
                    {6.92616226550102583133e+05, 5.33899720665395166725e+06, 5.53863892802116993153e+02},
                    {6.92604320383203448728e+05, 5.33900483400413952768e+06, 5.53479863549609035545e+02},
                    {6.92604486835803370923e+05, 5.33901933230211399496e+06, 5.53163741703469099775e+02},
                    {6.92595016888827434741e+05, 5.33901412967620044947e+06, 5.53100777272046912003e+02},
                    {6.92588183596876449883e+05, 5.33902527810477651656e+06, 5.52704748104726945712e+02},
                    {6.92598226259656017646e+05, 5.33902935839764587581e+06, 5.52725637074009910066e+02},
                    {6.92583649256460601464e+05, 5.33903884394041169435e+06, 5.52245956514287627215e+02},
                    {6.92582676079950761050e+05, 5.33905194969025347382e+06, 5.51806482767257989508e+02},
                    {6.92596240896048839204e+05, 5.33906806139415875077e+06, 5.51102160660737581566e+02},
                    {6.92586469625854166225e+05, 5.33907207990604825318e+06, 5.51094148294223259654e+02},
                    {6.92611874206026433967e+05, 5.33908878528678044677e+06, 5.50037770726737903715e+02},
                    {6.92648699511164217256e+05, 5.33909913036954309791e+06, 5.49414608248410672786e+02}
            };

            int i = 0;
            for (const auto &entry : roadHighwayExitSouth.getObjects()) {
                auto position = entry.second.getWorldPosition();
                EXPECT_NEAR(position.distance(expected[i++]), 0, maxDifference);
            }
        }


        /**
         * Tests that filtering the landmarks gives the correct objects.
         */
        TEST_F(ObjectTests, testFilterRelevantLandmarks) {
            const char *type = "pole";
            const char *name = "permanentDelineator";
            auto landmarks = roadHighwayExitSouth.getObjects(type, name);
            ASSERT_EQ(landmarks.size(), 35);

            for (const auto &entry : landmarks) {
                ASSERT_STREQ(entry.second.getType().c_str(), type);
                ASSERT_STREQ(entry.second.getName().c_str(), name);
            }
        }
    }// namespace tests
}// namespace opendrive
#include "gtest/gtest.h"

#include "HDMapTests.hpp"
#include "OpenDRIVE/Projector.hpp"

namespace opendrive {
    namespace tests {

        /**
         * Base setup for the geometry calculation tests.
         */
        class ObjectTests : public HDMapTests {
        public:
            /**
             * @destrcutor
             */
            ~ObjectTests() override = default;

        protected:

        };

        /**
         * Tests that calculating the objects world position from the s and t coordinates works.
         */
        TEST_F(ObjectTests, testObjectWorldPositions) {
            std::vector<Vector> expected = {
                    {6.92752815743200015277e+05, 5.33908762334284279495e+06, 5.55670002497437621969e+02},
                    {6.92751161325081600808e+05, 5.33909765915271546692e+06, 5.55432013276263887747e+02},
                    {6.92747748698621289805e+05, 5.33909678282888885587e+06, 5.55440411681538989797e+02},
                    {6.92606676590725546703e+05, 5.33910691727174911648e+06, 5.50462288033543813981e+02},
                    {6.92605936263353331015e+05, 5.33911222002448793501e+06, 5.50618264582608503588e+02},
                    {6.92616722412780509330e+05, 5.33911394294953905046e+06, 5.50312152741144586798e+02},
                    {6.92612352274155360647e+05, 5.33911510528160817921e+06, 5.50475993889218784716e+02},
                    {6.92751806624239194207e+05, 5.33908573604378942400e+06, 5.55698984517692110785e+02},
                    {6.92708349062337307259e+05, 5.33902845461071748286e+06, 5.55468431313710652830e+02},
                    {6.92701354525347356685e+05, 5.33902158906719740480e+06, 5.55409294850393393972e+02},
                    {6.92696974047571420670e+05, 5.33901916818122565746e+06, 5.55331228674097133080e+02},
                    {6.92685416537484037690e+05, 5.33901259803893510252e+06, 5.55120311637555801099e+02},
                    {6.92674729752844665200e+05, 5.33900847661753091961e+06, 5.54901415887459165788e+02},
                    {6.92663745573183521628e+05, 5.33900538014245778322e+06, 5.54696095019241852242e+02},
                    {6.92627908561217365786e+05, 5.33900764233390986919e+06, 5.53737218389663439666e+02},
                    {6.92621504221358103678e+05, 5.33900999713717587292e+06, 5.53521703885301576520e+02},
                    {6.92611674901380087249e+05, 5.33901597597509156913e+06, 5.53149207085744819778e+02},
                    {6.92715411180174676701e+05, 5.33903639781792741269e+06, 5.55532844065390918331e+02},
                    {6.92711465647067176178e+05, 5.33903282638295181096e+06, 5.55474009046998503436e+02},
                    {6.92703109791771508753e+05, 5.33902282555785682052e+06, 5.55434143257786558934e+02},
                    {6.92699460918574943207e+05, 5.33902092462930455804e+06, 5.55367260465854428730e+02},
                    {6.92686350812073564157e+05, 5.33901381162018980831e+06, 5.55116976077727258598e+02},
                    {6.92676977337832329795e+05, 5.33901042715993896127e+06, 5.54903861190704787987e+02},
                    {6.92668856890760944225e+05, 5.33900631287761311978e+06, 5.54804716416166911586e+02},
                    {6.92625243761863326654e+05, 5.33900896807541046292e+06, 5.53623756721107724843e+02},
                    {6.92692787940796464682e+05, 5.33901564974243100733e+06, 5.55282672482628186117e+02},
                    {6.92666741499418276362e+05, 5.33900617381537426263e+06, 5.54748597623685100189e+02},
                    {6.92615633566809119657e+05, 5.33901228463342692703e+06, 5.53357065161729792635e+02},
                    {6.92604712519053369761e+05, 5.33902262990766298026e+06, 5.52833305303182555690e+02},
                    {6.92717033156775054522e+05, 5.33903568337144888937e+06, 5.55597170937052396766e+02},
                    {6.92640507578698452562e+05, 5.33908862505519855767e+06, 5.48941041261344366831e+02},
                    {6.92594020567854749970e+05, 5.33904623808654583991e+06, 5.51871000727758996618e+02},
                    {6.92761309571860590950e+05, 5.33909902109804749489e+06, 5.55489774901992745981e+02},
                    {6.92873939773715101182e+05, 5.33929424015508778393e+06, 5.51232774362740656215e+02},
                    {6.92739965471938601695e+05, 5.33905853249801788479e+06, 5.55903494808340155942e+02},
                    {6.92644584093946614303e+05, 5.33900101571922283620e+06, 5.54399226972622273024e+02},
                    {6.92847919082914362662e+05, 5.33926466017213370651e+06, 5.51401225460296359415e+02},
                    {6.92803042867243755609e+05, 5.33917801201148796827e+06, 5.53577429905362464524e+02},
                    {6.92788302361827692948e+05, 5.33914951610617153347e+06, 5.54430489601381395914e+02},
                    {6.92760643188071786426e+05, 5.33909571294584684074e+06, 5.55557684406534349364e+02},
                    {6.92769047732471721247e+05, 5.33908967894155345857e+06, 5.55768519499305625686e+02},
                    {6.92741101515630143695e+05, 5.33906051792388595641e+06, 5.55898087234960257774e+02},
                    {6.92747976687531103380e+05, 5.33905190830403473228e+06, 5.56113170820379195902e+02},
                    {6.92736812390750972554e+05, 5.33903662906518951058e+06, 5.56129768063818687551e+02},
                    {6.92715324102841783315e+05, 5.33902842880185693502e+06, 5.55682627112614227372e+02},
                    {6.92706243606220115907e+05, 5.33902065704503003508e+06, 5.55575564401139786241e+02},
                    {6.92696334554323111661e+05, 5.33901396993821766227e+06, 5.55435361469334907270e+02},
                    {6.92711606097710086033e+05, 5.33901126169955078512e+06, 5.55944692296138669008e+02},
                    {6.92698739124026615173e+05, 5.33900293781438097358e+06, 5.55798618034137689392e+02},
                    {6.92685544116096454673e+05, 5.33900846095835138112e+06, 5.55251101412681236980e+02},
                    {6.92685014213815564290e+05, 5.33899662877869606018e+06, 5.55640347479638535333e+02},
                    {6.92674259387037949637e+05, 5.33900454914533998817e+06, 5.55035177530022906467e+02},
                    {6.92662756505107972771e+05, 5.33900171105398610234e+06, 5.54819812295696920046e+02},
                    {6.92671327305635553785e+05, 5.33899263406360708177e+06, 5.55423209343505050128e+02},
                    {6.92657285123253008351e+05, 5.33899044976968318224e+06, 5.55148409230874676723e+02},
                    {6.92642942835270310752e+05, 5.33899021158938575536e+06, 5.54839186901302241495e+02},
                    {6.92634989536295644939e+05, 5.33900192066369485110e+06, 5.54155355305653756659e+02},
                    {6.92623636180429602973e+05, 5.33900538981945719570e+06, 5.53799721009621862322e+02},
                    {6.92628959429247071967e+05, 5.33899256407796125859e+06, 5.54512098967208657996e+02},
                    {6.92613233619208331220e+05, 5.33901125570971705019e+06, 5.53414936512195708929e+02},
                    {6.92616229870136245154e+05, 5.33899721338332537562e+06, 5.54189519114979702863e+02},
                    {6.92604325109470519237e+05, 5.33900483979650400579e+06, 5.53805111795181460366e+02},
                    {6.92604484393795486540e+05, 5.33901933023611549288e+06, 5.53015577062930788088e+02},
                    {6.92595022033095825464e+05, 5.33901413371311035007e+06, 5.53407489247855323811e+02},
                    {6.92588189265818102285e+05, 5.33902528074961621314e+06, 5.53004543186140381295e+02},
                    {6.92598223417521920055e+05, 5.33902935703175514936e+06, 5.52574240413891288881e+02},
                    {6.92583655617993208580e+05, 5.33903884521444793791e+06, 5.52553069802464392524e+02},
                    {6.92582680862167384475e+05, 5.33905194957181345671e+06, 5.52067021711024835895e+02},
                    {6.92596238357931957580e+05, 5.33906806237447354943e+06, 5.50970370965645429351e+02},
                    {6.92586475513251731172e+05, 5.33907207760634925216e+06, 5.51399317618660461449e+02},
                    {6.92611872247700812295e+05, 5.33908878776261862367e+06, 5.49890266696283561032e+02},
                    {6.92648699601184925996e+05, 5.33909913130790460855e+06, 5.49337080704329423497e+02}
            };

            int i = 0;
            for (const auto &entry : roadHighwayExitSouth.getObjects()) {
                auto position = roadHighwayExitSouth.getWorldPosition<Object>(entry.first);
//                std::cout << "{" << position << "}," << std::endl;
                EXPECT_NEAR(position.distance(expected[i++]), 0, maxDifference);
            }
        }


        /**
         * Tests that filtering the landmarks gives the correct objects.
         */
        TEST_F(ObjectTests, testFilterRelevantLandmarks) {
            const char *type = "pole";
            const char *name = "permanentDelineator";
            auto landmarks = roadHighwayExitSouth.filterObjects(type, name);
            ASSERT_EQ(landmarks.size(), 35);

            for (const auto &entry : landmarks) {
                ASSERT_STREQ(entry.second.getType().c_str(), type);
                ASSERT_STREQ(entry.second.getName().c_str(), name);
            }
        }
    }// namespace tests
}// namespace opendrive
// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef DELIVERABLE_XSD_SCHEMA_OPENDRIVE_16_RAILROAD_HXX
#define DELIVERABLE_XSD_SCHEMA_OPENDRIVE_16_RAILROAD_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace simulation
{
  namespace standard
  {
    namespace opendrive_schema
    {
      class e_road_railroad_switch_position;
      class e_station_platform_segment_side;
      class e_station_type;
      class t_road_railroad;
      class t_road_railroad_switch;
      class t_road_railroad_switch_mainTrack;
      class t_road_railroad_switch_partner;
      class t_road_railroad_switch_sideTrack;
      class t_station;
      class t_station_platform;
      class t_station_platform_segment;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "opendrive_16_junction.hxx"

#include "opendrive_16_core.hxx"

namespace simulation
{
  namespace standard
  {
    namespace opendrive_schema
    {
      class e_road_railroad_switch_position: public ::xml_schema::string
      {
        public:
        enum value
        {
          dynamic,
          straight,
          turn
        };

        e_road_railroad_switch_position (value v);

        e_road_railroad_switch_position (const char* v);

        e_road_railroad_switch_position (const ::std::string& v);

        e_road_railroad_switch_position (const ::xml_schema::string& v);

        e_road_railroad_switch_position (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

        e_road_railroad_switch_position (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

        e_road_railroad_switch_position (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

        e_road_railroad_switch_position (const e_road_railroad_switch_position& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

        virtual e_road_railroad_switch_position*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        e_road_railroad_switch_position&
        operator= (value v);

        virtual
        operator value () const
        {
          return _xsd_e_road_railroad_switch_position_convert ();
        }

        protected:
        value
        _xsd_e_road_railroad_switch_position_convert () const;

        public:
        static const char* const _xsd_e_road_railroad_switch_position_literals_[3];
        static const value _xsd_e_road_railroad_switch_position_indexes_[3];
      };

      class e_station_platform_segment_side: public ::xml_schema::string
      {
        public:
        enum value
        {
          left,
          right
        };

        e_station_platform_segment_side (value v);

        e_station_platform_segment_side (const char* v);

        e_station_platform_segment_side (const ::std::string& v);

        e_station_platform_segment_side (const ::xml_schema::string& v);

        e_station_platform_segment_side (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

        e_station_platform_segment_side (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

        e_station_platform_segment_side (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

        e_station_platform_segment_side (const e_station_platform_segment_side& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

        virtual e_station_platform_segment_side*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        e_station_platform_segment_side&
        operator= (value v);

        virtual
        operator value () const
        {
          return _xsd_e_station_platform_segment_side_convert ();
        }

        protected:
        value
        _xsd_e_station_platform_segment_side_convert () const;

        public:
        static const char* const _xsd_e_station_platform_segment_side_literals_[2];
        static const value _xsd_e_station_platform_segment_side_indexes_[2];
      };

      class e_station_type: public ::xml_schema::string
      {
        public:
        enum value
        {
          small,
          medium,
          large
        };

        e_station_type (value v);

        e_station_type (const char* v);

        e_station_type (const ::std::string& v);

        e_station_type (const ::xml_schema::string& v);

        e_station_type (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        e_station_type (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        e_station_type (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        e_station_type (const e_station_type& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        virtual e_station_type*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        e_station_type&
        operator= (value v);

        virtual
        operator value () const
        {
          return _xsd_e_station_type_convert ();
        }

        protected:
        value
        _xsd_e_station_type_convert () const;

        public:
        static const char* const _xsd_e_station_type_literals_[3];
        static const value _xsd_e_station_type_indexes_[3];
      };

      class t_road_railroad: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // switch
        //
        typedef ::simulation::standard::opendrive_schema::t_road_railroad_switch switch_type;
        typedef ::xsd::cxx::tree::sequence< switch_type > switch_sequence;
        typedef switch_sequence::iterator switch_iterator;
        typedef switch_sequence::const_iterator switch_const_iterator;
        typedef ::xsd::cxx::tree::traits< switch_type, char > switch_traits;

        const switch_sequence&
        switch_ () const;

        switch_sequence&
        switch_ ();

        void
        switch_ (const switch_sequence& s);

        // include
        //
        typedef ::simulation::standard::opendrive_schema::t_include include_type;
        typedef ::xsd::cxx::tree::sequence< include_type > include_sequence;
        typedef include_sequence::iterator include_iterator;
        typedef include_sequence::const_iterator include_const_iterator;
        typedef ::xsd::cxx::tree::traits< include_type, char > include_traits;

        const include_sequence&
        include () const;

        include_sequence&
        include ();

        void
        include (const include_sequence& s);

        // userData
        //
        typedef ::simulation::standard::opendrive_schema::t_userData userData_type;
        typedef ::xsd::cxx::tree::sequence< userData_type > userData_sequence;
        typedef userData_sequence::iterator userData_iterator;
        typedef userData_sequence::const_iterator userData_const_iterator;
        typedef ::xsd::cxx::tree::traits< userData_type, char > userData_traits;

        const userData_sequence&
        userData () const;

        userData_sequence&
        userData ();

        void
        userData (const userData_sequence& s);

        // dataQuality
        //
        typedef ::simulation::standard::opendrive_schema::t_dataQuality dataQuality_type;
        typedef ::xsd::cxx::tree::sequence< dataQuality_type > dataQuality_sequence;
        typedef dataQuality_sequence::iterator dataQuality_iterator;
        typedef dataQuality_sequence::const_iterator dataQuality_const_iterator;
        typedef ::xsd::cxx::tree::traits< dataQuality_type, char > dataQuality_traits;

        const dataQuality_sequence&
        dataQuality () const;

        dataQuality_sequence&
        dataQuality ();

        void
        dataQuality (const dataQuality_sequence& s);

        // Constructors.
        //
        t_road_railroad ();

        t_road_railroad (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        t_road_railroad (const t_road_railroad& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        virtual t_road_railroad*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_railroad&
        operator= (const t_road_railroad& x);

        virtual 
        ~t_road_railroad ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        switch_sequence switch__;
        include_sequence include_;
        userData_sequence userData_;
        dataQuality_sequence dataQuality_;
      };

      class t_road_railroad_switch: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // mainTrack
        //
        typedef ::simulation::standard::opendrive_schema::t_road_railroad_switch_mainTrack mainTrack_type;
        typedef ::xsd::cxx::tree::traits< mainTrack_type, char > mainTrack_traits;

        const mainTrack_type&
        mainTrack () const;

        mainTrack_type&
        mainTrack ();

        void
        mainTrack (const mainTrack_type& x);

        void
        mainTrack (::std::unique_ptr< mainTrack_type > p);

        // sideTrack
        //
        typedef ::simulation::standard::opendrive_schema::t_road_railroad_switch_sideTrack sideTrack_type;
        typedef ::xsd::cxx::tree::traits< sideTrack_type, char > sideTrack_traits;

        const sideTrack_type&
        sideTrack () const;

        sideTrack_type&
        sideTrack ();

        void
        sideTrack (const sideTrack_type& x);

        void
        sideTrack (::std::unique_ptr< sideTrack_type > p);

        // partner
        //
        typedef ::simulation::standard::opendrive_schema::t_road_railroad_switch_partner partner_type;
        typedef ::xsd::cxx::tree::optional< partner_type > partner_optional;
        typedef ::xsd::cxx::tree::traits< partner_type, char > partner_traits;

        const partner_optional&
        partner () const;

        partner_optional&
        partner ();

        void
        partner (const partner_type& x);

        void
        partner (const partner_optional& x);

        void
        partner (::std::unique_ptr< partner_type > p);

        // include
        //
        typedef ::simulation::standard::opendrive_schema::t_include include_type;
        typedef ::xsd::cxx::tree::sequence< include_type > include_sequence;
        typedef include_sequence::iterator include_iterator;
        typedef include_sequence::const_iterator include_const_iterator;
        typedef ::xsd::cxx::tree::traits< include_type, char > include_traits;

        const include_sequence&
        include () const;

        include_sequence&
        include ();

        void
        include (const include_sequence& s);

        // userData
        //
        typedef ::simulation::standard::opendrive_schema::t_userData userData_type;
        typedef ::xsd::cxx::tree::sequence< userData_type > userData_sequence;
        typedef userData_sequence::iterator userData_iterator;
        typedef userData_sequence::const_iterator userData_const_iterator;
        typedef ::xsd::cxx::tree::traits< userData_type, char > userData_traits;

        const userData_sequence&
        userData () const;

        userData_sequence&
        userData ();

        void
        userData (const userData_sequence& s);

        // dataQuality
        //
        typedef ::simulation::standard::opendrive_schema::t_dataQuality dataQuality_type;
        typedef ::xsd::cxx::tree::sequence< dataQuality_type > dataQuality_sequence;
        typedef dataQuality_sequence::iterator dataQuality_iterator;
        typedef dataQuality_sequence::const_iterator dataQuality_const_iterator;
        typedef ::xsd::cxx::tree::traits< dataQuality_type, char > dataQuality_traits;

        const dataQuality_sequence&
        dataQuality () const;

        dataQuality_sequence&
        dataQuality ();

        void
        dataQuality (const dataQuality_sequence& s);

        // name
        //
        typedef ::xml_schema::string name_type;
        typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

        const name_type&
        name () const;

        name_type&
        name ();

        void
        name (const name_type& x);

        void
        name (::std::unique_ptr< name_type > p);

        // id
        //
        typedef ::xml_schema::string id_type;
        typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

        const id_type&
        id () const;

        id_type&
        id ();

        void
        id (const id_type& x);

        void
        id (::std::unique_ptr< id_type > p);

        // position
        //
        typedef ::simulation::standard::opendrive_schema::e_road_railroad_switch_position position_type;
        typedef ::xsd::cxx::tree::traits< position_type, char > position_traits;

        const position_type&
        position () const;

        position_type&
        position ();

        void
        position (const position_type& x);

        void
        position (::std::unique_ptr< position_type > p);

        // Constructors.
        //
        t_road_railroad_switch (const mainTrack_type&,
                                const sideTrack_type&,
                                const name_type&,
                                const id_type&,
                                const position_type&);

        t_road_railroad_switch (::std::unique_ptr< mainTrack_type >,
                                ::std::unique_ptr< sideTrack_type >,
                                const name_type&,
                                const id_type&,
                                const position_type&);

        t_road_railroad_switch (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

        t_road_railroad_switch (const t_road_railroad_switch& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

        virtual t_road_railroad_switch*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_railroad_switch&
        operator= (const t_road_railroad_switch& x);

        virtual 
        ~t_road_railroad_switch ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< mainTrack_type > mainTrack_;
        ::xsd::cxx::tree::one< sideTrack_type > sideTrack_;
        partner_optional partner_;
        include_sequence include_;
        userData_sequence userData_;
        dataQuality_sequence dataQuality_;
        ::xsd::cxx::tree::one< name_type > name_;
        ::xsd::cxx::tree::one< id_type > id_;
        ::xsd::cxx::tree::one< position_type > position_;
      };

      class t_road_railroad_switch_mainTrack: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // include
        //
        typedef ::simulation::standard::opendrive_schema::t_include include_type;
        typedef ::xsd::cxx::tree::sequence< include_type > include_sequence;
        typedef include_sequence::iterator include_iterator;
        typedef include_sequence::const_iterator include_const_iterator;
        typedef ::xsd::cxx::tree::traits< include_type, char > include_traits;

        const include_sequence&
        include () const;

        include_sequence&
        include ();

        void
        include (const include_sequence& s);

        // userData
        //
        typedef ::simulation::standard::opendrive_schema::t_userData userData_type;
        typedef ::xsd::cxx::tree::sequence< userData_type > userData_sequence;
        typedef userData_sequence::iterator userData_iterator;
        typedef userData_sequence::const_iterator userData_const_iterator;
        typedef ::xsd::cxx::tree::traits< userData_type, char > userData_traits;

        const userData_sequence&
        userData () const;

        userData_sequence&
        userData ();

        void
        userData (const userData_sequence& s);

        // dataQuality
        //
        typedef ::simulation::standard::opendrive_schema::t_dataQuality dataQuality_type;
        typedef ::xsd::cxx::tree::sequence< dataQuality_type > dataQuality_sequence;
        typedef dataQuality_sequence::iterator dataQuality_iterator;
        typedef dataQuality_sequence::const_iterator dataQuality_const_iterator;
        typedef ::xsd::cxx::tree::traits< dataQuality_type, char > dataQuality_traits;

        const dataQuality_sequence&
        dataQuality () const;

        dataQuality_sequence&
        dataQuality ();

        void
        dataQuality (const dataQuality_sequence& s);

        // id
        //
        typedef ::xml_schema::string id_type;
        typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

        const id_type&
        id () const;

        id_type&
        id ();

        void
        id (const id_type& x);

        void
        id (::std::unique_ptr< id_type > p);

        // s
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero s_type;
        typedef ::xsd::cxx::tree::traits< s_type, char > s_traits;

        const s_type&
        s () const;

        s_type&
        s ();

        void
        s (const s_type& x);

        void
        s (::std::unique_ptr< s_type > p);

        // dir
        //
        typedef ::simulation::standard::opendrive_schema::e_elementDir dir_type;
        typedef ::xsd::cxx::tree::traits< dir_type, char > dir_traits;

        const dir_type&
        dir () const;

        dir_type&
        dir ();

        void
        dir (const dir_type& x);

        void
        dir (::std::unique_ptr< dir_type > p);

        // Constructors.
        //
        t_road_railroad_switch_mainTrack (const id_type&,
                                          const s_type&,
                                          const dir_type&);

        t_road_railroad_switch_mainTrack (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

        t_road_railroad_switch_mainTrack (const t_road_railroad_switch_mainTrack& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

        virtual t_road_railroad_switch_mainTrack*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_railroad_switch_mainTrack&
        operator= (const t_road_railroad_switch_mainTrack& x);

        virtual 
        ~t_road_railroad_switch_mainTrack ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        include_sequence include_;
        userData_sequence userData_;
        dataQuality_sequence dataQuality_;
        ::xsd::cxx::tree::one< id_type > id_;
        ::xsd::cxx::tree::one< s_type > s_;
        ::xsd::cxx::tree::one< dir_type > dir_;
      };

      class t_road_railroad_switch_partner: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // include
        //
        typedef ::simulation::standard::opendrive_schema::t_include include_type;
        typedef ::xsd::cxx::tree::sequence< include_type > include_sequence;
        typedef include_sequence::iterator include_iterator;
        typedef include_sequence::const_iterator include_const_iterator;
        typedef ::xsd::cxx::tree::traits< include_type, char > include_traits;

        const include_sequence&
        include () const;

        include_sequence&
        include ();

        void
        include (const include_sequence& s);

        // userData
        //
        typedef ::simulation::standard::opendrive_schema::t_userData userData_type;
        typedef ::xsd::cxx::tree::sequence< userData_type > userData_sequence;
        typedef userData_sequence::iterator userData_iterator;
        typedef userData_sequence::const_iterator userData_const_iterator;
        typedef ::xsd::cxx::tree::traits< userData_type, char > userData_traits;

        const userData_sequence&
        userData () const;

        userData_sequence&
        userData ();

        void
        userData (const userData_sequence& s);

        // dataQuality
        //
        typedef ::simulation::standard::opendrive_schema::t_dataQuality dataQuality_type;
        typedef ::xsd::cxx::tree::sequence< dataQuality_type > dataQuality_sequence;
        typedef dataQuality_sequence::iterator dataQuality_iterator;
        typedef dataQuality_sequence::const_iterator dataQuality_const_iterator;
        typedef ::xsd::cxx::tree::traits< dataQuality_type, char > dataQuality_traits;

        const dataQuality_sequence&
        dataQuality () const;

        dataQuality_sequence&
        dataQuality ();

        void
        dataQuality (const dataQuality_sequence& s);

        // name
        //
        typedef ::xml_schema::string name_type;
        typedef ::xsd::cxx::tree::optional< name_type > name_optional;
        typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

        const name_optional&
        name () const;

        name_optional&
        name ();

        void
        name (const name_type& x);

        void
        name (const name_optional& x);

        void
        name (::std::unique_ptr< name_type > p);

        // id
        //
        typedef ::xml_schema::string id_type;
        typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

        const id_type&
        id () const;

        id_type&
        id ();

        void
        id (const id_type& x);

        void
        id (::std::unique_ptr< id_type > p);

        // Constructors.
        //
        t_road_railroad_switch_partner (const id_type&);

        t_road_railroad_switch_partner (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

        t_road_railroad_switch_partner (const t_road_railroad_switch_partner& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

        virtual t_road_railroad_switch_partner*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_railroad_switch_partner&
        operator= (const t_road_railroad_switch_partner& x);

        virtual 
        ~t_road_railroad_switch_partner ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        include_sequence include_;
        userData_sequence userData_;
        dataQuality_sequence dataQuality_;
        name_optional name_;
        ::xsd::cxx::tree::one< id_type > id_;
      };

      class t_road_railroad_switch_sideTrack: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // include
        //
        typedef ::simulation::standard::opendrive_schema::t_include include_type;
        typedef ::xsd::cxx::tree::sequence< include_type > include_sequence;
        typedef include_sequence::iterator include_iterator;
        typedef include_sequence::const_iterator include_const_iterator;
        typedef ::xsd::cxx::tree::traits< include_type, char > include_traits;

        const include_sequence&
        include () const;

        include_sequence&
        include ();

        void
        include (const include_sequence& s);

        // userData
        //
        typedef ::simulation::standard::opendrive_schema::t_userData userData_type;
        typedef ::xsd::cxx::tree::sequence< userData_type > userData_sequence;
        typedef userData_sequence::iterator userData_iterator;
        typedef userData_sequence::const_iterator userData_const_iterator;
        typedef ::xsd::cxx::tree::traits< userData_type, char > userData_traits;

        const userData_sequence&
        userData () const;

        userData_sequence&
        userData ();

        void
        userData (const userData_sequence& s);

        // dataQuality
        //
        typedef ::simulation::standard::opendrive_schema::t_dataQuality dataQuality_type;
        typedef ::xsd::cxx::tree::sequence< dataQuality_type > dataQuality_sequence;
        typedef dataQuality_sequence::iterator dataQuality_iterator;
        typedef dataQuality_sequence::const_iterator dataQuality_const_iterator;
        typedef ::xsd::cxx::tree::traits< dataQuality_type, char > dataQuality_traits;

        const dataQuality_sequence&
        dataQuality () const;

        dataQuality_sequence&
        dataQuality ();

        void
        dataQuality (const dataQuality_sequence& s);

        // id
        //
        typedef ::xml_schema::string id_type;
        typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

        const id_type&
        id () const;

        id_type&
        id ();

        void
        id (const id_type& x);

        void
        id (::std::unique_ptr< id_type > p);

        // s
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero s_type;
        typedef ::xsd::cxx::tree::traits< s_type, char > s_traits;

        const s_type&
        s () const;

        s_type&
        s ();

        void
        s (const s_type& x);

        void
        s (::std::unique_ptr< s_type > p);

        // dir
        //
        typedef ::simulation::standard::opendrive_schema::e_elementDir dir_type;
        typedef ::xsd::cxx::tree::traits< dir_type, char > dir_traits;

        const dir_type&
        dir () const;

        dir_type&
        dir ();

        void
        dir (const dir_type& x);

        void
        dir (::std::unique_ptr< dir_type > p);

        // Constructors.
        //
        t_road_railroad_switch_sideTrack (const id_type&,
                                          const s_type&,
                                          const dir_type&);

        t_road_railroad_switch_sideTrack (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

        t_road_railroad_switch_sideTrack (const t_road_railroad_switch_sideTrack& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

        virtual t_road_railroad_switch_sideTrack*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_railroad_switch_sideTrack&
        operator= (const t_road_railroad_switch_sideTrack& x);

        virtual 
        ~t_road_railroad_switch_sideTrack ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        include_sequence include_;
        userData_sequence userData_;
        dataQuality_sequence dataQuality_;
        ::xsd::cxx::tree::one< id_type > id_;
        ::xsd::cxx::tree::one< s_type > s_;
        ::xsd::cxx::tree::one< dir_type > dir_;
      };

      class t_station: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // platform
        //
        typedef ::simulation::standard::opendrive_schema::t_station_platform platform_type;
        typedef ::xsd::cxx::tree::sequence< platform_type > platform_sequence;
        typedef platform_sequence::iterator platform_iterator;
        typedef platform_sequence::const_iterator platform_const_iterator;
        typedef ::xsd::cxx::tree::traits< platform_type, char > platform_traits;

        const platform_sequence&
        platform () const;

        platform_sequence&
        platform ();

        void
        platform (const platform_sequence& s);

        // include
        //
        typedef ::simulation::standard::opendrive_schema::t_include include_type;
        typedef ::xsd::cxx::tree::sequence< include_type > include_sequence;
        typedef include_sequence::iterator include_iterator;
        typedef include_sequence::const_iterator include_const_iterator;
        typedef ::xsd::cxx::tree::traits< include_type, char > include_traits;

        const include_sequence&
        include () const;

        include_sequence&
        include ();

        void
        include (const include_sequence& s);

        // userData
        //
        typedef ::simulation::standard::opendrive_schema::t_userData userData_type;
        typedef ::xsd::cxx::tree::sequence< userData_type > userData_sequence;
        typedef userData_sequence::iterator userData_iterator;
        typedef userData_sequence::const_iterator userData_const_iterator;
        typedef ::xsd::cxx::tree::traits< userData_type, char > userData_traits;

        const userData_sequence&
        userData () const;

        userData_sequence&
        userData ();

        void
        userData (const userData_sequence& s);

        // dataQuality
        //
        typedef ::simulation::standard::opendrive_schema::t_dataQuality dataQuality_type;
        typedef ::xsd::cxx::tree::sequence< dataQuality_type > dataQuality_sequence;
        typedef dataQuality_sequence::iterator dataQuality_iterator;
        typedef dataQuality_sequence::const_iterator dataQuality_const_iterator;
        typedef ::xsd::cxx::tree::traits< dataQuality_type, char > dataQuality_traits;

        const dataQuality_sequence&
        dataQuality () const;

        dataQuality_sequence&
        dataQuality ();

        void
        dataQuality (const dataQuality_sequence& s);

        // name
        //
        typedef ::xml_schema::string name_type;
        typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

        const name_type&
        name () const;

        name_type&
        name ();

        void
        name (const name_type& x);

        void
        name (::std::unique_ptr< name_type > p);

        // id
        //
        typedef ::xml_schema::string id_type;
        typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

        const id_type&
        id () const;

        id_type&
        id ();

        void
        id (const id_type& x);

        void
        id (::std::unique_ptr< id_type > p);

        // type
        //
        typedef ::simulation::standard::opendrive_schema::e_station_type type_type;
        typedef ::xsd::cxx::tree::optional< type_type > type_optional;
        typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

        const type_optional&
        type () const;

        type_optional&
        type ();

        void
        type (const type_type& x);

        void
        type (const type_optional& x);

        void
        type (::std::unique_ptr< type_type > p);

        // Constructors.
        //
        t_station (const name_type&,
                   const id_type&);

        t_station (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

        t_station (const t_station& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

        virtual t_station*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_station&
        operator= (const t_station& x);

        virtual 
        ~t_station ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        platform_sequence platform_;
        include_sequence include_;
        userData_sequence userData_;
        dataQuality_sequence dataQuality_;
        ::xsd::cxx::tree::one< name_type > name_;
        ::xsd::cxx::tree::one< id_type > id_;
        type_optional type_;
      };

      class t_station_platform: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // segment
        //
        typedef ::simulation::standard::opendrive_schema::t_station_platform_segment segment_type;
        typedef ::xsd::cxx::tree::sequence< segment_type > segment_sequence;
        typedef segment_sequence::iterator segment_iterator;
        typedef segment_sequence::const_iterator segment_const_iterator;
        typedef ::xsd::cxx::tree::traits< segment_type, char > segment_traits;

        const segment_sequence&
        segment () const;

        segment_sequence&
        segment ();

        void
        segment (const segment_sequence& s);

        // include
        //
        typedef ::simulation::standard::opendrive_schema::t_include include_type;
        typedef ::xsd::cxx::tree::sequence< include_type > include_sequence;
        typedef include_sequence::iterator include_iterator;
        typedef include_sequence::const_iterator include_const_iterator;
        typedef ::xsd::cxx::tree::traits< include_type, char > include_traits;

        const include_sequence&
        include () const;

        include_sequence&
        include ();

        void
        include (const include_sequence& s);

        // userData
        //
        typedef ::simulation::standard::opendrive_schema::t_userData userData_type;
        typedef ::xsd::cxx::tree::sequence< userData_type > userData_sequence;
        typedef userData_sequence::iterator userData_iterator;
        typedef userData_sequence::const_iterator userData_const_iterator;
        typedef ::xsd::cxx::tree::traits< userData_type, char > userData_traits;

        const userData_sequence&
        userData () const;

        userData_sequence&
        userData ();

        void
        userData (const userData_sequence& s);

        // dataQuality
        //
        typedef ::simulation::standard::opendrive_schema::t_dataQuality dataQuality_type;
        typedef ::xsd::cxx::tree::sequence< dataQuality_type > dataQuality_sequence;
        typedef dataQuality_sequence::iterator dataQuality_iterator;
        typedef dataQuality_sequence::const_iterator dataQuality_const_iterator;
        typedef ::xsd::cxx::tree::traits< dataQuality_type, char > dataQuality_traits;

        const dataQuality_sequence&
        dataQuality () const;

        dataQuality_sequence&
        dataQuality ();

        void
        dataQuality (const dataQuality_sequence& s);

        // name
        //
        typedef ::xml_schema::string name_type;
        typedef ::xsd::cxx::tree::optional< name_type > name_optional;
        typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

        const name_optional&
        name () const;

        name_optional&
        name ();

        void
        name (const name_type& x);

        void
        name (const name_optional& x);

        void
        name (::std::unique_ptr< name_type > p);

        // id
        //
        typedef ::xml_schema::string id_type;
        typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

        const id_type&
        id () const;

        id_type&
        id ();

        void
        id (const id_type& x);

        void
        id (::std::unique_ptr< id_type > p);

        // Constructors.
        //
        t_station_platform (const id_type&);

        t_station_platform (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        t_station_platform (const t_station_platform& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        virtual t_station_platform*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_station_platform&
        operator= (const t_station_platform& x);

        virtual 
        ~t_station_platform ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        segment_sequence segment_;
        include_sequence include_;
        userData_sequence userData_;
        dataQuality_sequence dataQuality_;
        name_optional name_;
        ::xsd::cxx::tree::one< id_type > id_;
      };

      class t_station_platform_segment: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // roadId
        //
        typedef ::xml_schema::string roadId_type;
        typedef ::xsd::cxx::tree::traits< roadId_type, char > roadId_traits;

        const roadId_type&
        roadId () const;

        roadId_type&
        roadId ();

        void
        roadId (const roadId_type& x);

        void
        roadId (::std::unique_ptr< roadId_type > p);

        // sStart
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero sStart_type;
        typedef ::xsd::cxx::tree::traits< sStart_type, char > sStart_traits;

        const sStart_type&
        sStart () const;

        sStart_type&
        sStart ();

        void
        sStart (const sStart_type& x);

        void
        sStart (::std::unique_ptr< sStart_type > p);

        // sEnd
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero sEnd_type;
        typedef ::xsd::cxx::tree::traits< sEnd_type, char > sEnd_traits;

        const sEnd_type&
        sEnd () const;

        sEnd_type&
        sEnd ();

        void
        sEnd (const sEnd_type& x);

        void
        sEnd (::std::unique_ptr< sEnd_type > p);

        // side
        //
        typedef ::simulation::standard::opendrive_schema::e_station_platform_segment_side side_type;
        typedef ::xsd::cxx::tree::traits< side_type, char > side_traits;

        const side_type&
        side () const;

        side_type&
        side ();

        void
        side (const side_type& x);

        void
        side (::std::unique_ptr< side_type > p);

        // Constructors.
        //
        t_station_platform_segment (const roadId_type&,
                                    const sStart_type&,
                                    const sEnd_type&,
                                    const side_type&);

        t_station_platform_segment (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

        t_station_platform_segment (const t_station_platform_segment& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

        virtual t_station_platform_segment*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_station_platform_segment&
        operator= (const t_station_platform_segment& x);

        virtual 
        ~t_station_platform_segment ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< roadId_type > roadId_;
        ::xsd::cxx::tree::one< sStart_type > sStart_;
        ::xsd::cxx::tree::one< sEnd_type > sEnd_;
        ::xsd::cxx::tree::one< side_type > side_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace simulation
{
  namespace standard
  {
    namespace opendrive_schema
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // DELIVERABLE_XSD_SCHEMA_OPENDRIVE_16_RAILROAD_HXX

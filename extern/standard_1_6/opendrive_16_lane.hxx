// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef DELIVERABLE_XSD_SCHEMA_OPENDRIVE_16_LANE_HXX
#define DELIVERABLE_XSD_SCHEMA_OPENDRIVE_16_LANE_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace simulation
{
  namespace standard
  {
    namespace opendrive_schema
    {
      class e_accessRestrictionType;
      class e_laneType;
      class e_road_lanes_laneSection_lcr_lane_roadMark_laneChange;
      class e_road_lanes_laneSection_lr_lane_access_rule;
      class e_roadMarkColor;
      class e_roadMarkRule;
      class e_roadMarkType;
      class e_roadMarkWeight;
      class t_bool;
      class t_road_lanes;
      class t_road_lanes_laneOffset;
      class t_road_lanes_laneSection;
      class t_road_lanes_laneSection_center;
      class t_road_lanes_laneSection_lr_lane;
      class t_road_lanes_laneSection_center_lane;
      class t_road_lanes_laneSection_lcr_lane_link;
      class t_road_lanes_laneSection_lcr_lane_link_predecessorSuccessor;
      class t_road_lanes_laneSection_lcr_lane_roadMark;
      class t_road_lanes_laneSection_lcr_lane_roadMark_explicit;
      class t_road_lanes_laneSection_lcr_lane_roadMark_explicit_line;
      class t_road_lanes_laneSection_lcr_lane_roadMark_sway;
      class t_road_lanes_laneSection_lcr_lane_roadMark_type;
      class t_road_lanes_laneSection_lcr_lane_roadMark_type_line;
      class t_road_lanes_laneSection_left;
      class t_road_lanes_laneSection_left_lane;
      class t_road_lanes_laneSection_lr_lane_access;
      class t_road_lanes_laneSection_lr_lane_border;
      class t_road_lanes_laneSection_lr_lane_height;
      class t_road_lanes_laneSection_lr_lane_material;
      class t_road_lanes_laneSection_lr_lane_rule;
      class t_road_lanes_laneSection_lr_lane_speed;
      class t_road_lanes_laneSection_lr_lane_width;
      class t_road_lanes_laneSection_right;
      class t_road_lanes_laneSection_right_lane;
      class t_road_objects_object_laneValidity;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "opendrive_16_core.hxx"

namespace simulation
{
  namespace standard
  {
    namespace opendrive_schema
    {
      class e_accessRestrictionType: public ::xml_schema::string
      {
        public:
        enum value
        {
          simulator,
          autonomousTraffic,
          pedestrian,
          passengerCar,
          bus,
          delivery,
          emergency,
          taxi,
          throughTraffic,
          truck,
          bicycle,
          motorcycle,
          none,
          trucks
        };

        e_accessRestrictionType (value v);

        e_accessRestrictionType (const char* v);

        e_accessRestrictionType (const ::std::string& v);

        e_accessRestrictionType (const ::xml_schema::string& v);

        e_accessRestrictionType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

        e_accessRestrictionType (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

        e_accessRestrictionType (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

        e_accessRestrictionType (const e_accessRestrictionType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

        virtual e_accessRestrictionType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        e_accessRestrictionType&
        operator= (value v);

        virtual
        operator value () const
        {
          return _xsd_e_accessRestrictionType_convert ();
        }

        protected:
        value
        _xsd_e_accessRestrictionType_convert () const;

        public:
        static const char* const _xsd_e_accessRestrictionType_literals_[14];
        static const value _xsd_e_accessRestrictionType_indexes_[14];
      };

      class e_laneType: public ::xml_schema::string
      {
        public:
        enum value
        {
          shoulder,
          border,
          driving,
          stop,
          none,
          restricted,
          parking,
          median,
          biking,
          sidewalk,
          curb,
          exit,
          entry,
          onRamp,
          offRamp,
          connectingRamp,
          bidirectional,
          special1,
          special2,
          special3,
          roadWorks,
          tram,
          rail,
          bus,
          taxi,
          HOV,
          mwyEntry,
          mwyExit
        };

        e_laneType (value v);

        e_laneType (const char* v);

        e_laneType (const ::std::string& v);

        e_laneType (const ::xml_schema::string& v);

        e_laneType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

        e_laneType (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

        e_laneType (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

        e_laneType (const e_laneType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

        virtual e_laneType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        e_laneType&
        operator= (value v);

        virtual
        operator value () const
        {
          return _xsd_e_laneType_convert ();
        }

        protected:
        value
        _xsd_e_laneType_convert () const;

        public:
        static const char* const _xsd_e_laneType_literals_[28];
        static const value _xsd_e_laneType_indexes_[28];
      };

      class e_road_lanes_laneSection_lcr_lane_roadMark_laneChange: public ::xml_schema::string
      {
        public:
        enum value
        {
          increase,
          decrease,
          both,
          none
        };

        e_road_lanes_laneSection_lcr_lane_roadMark_laneChange (value v);

        e_road_lanes_laneSection_lcr_lane_roadMark_laneChange (const char* v);

        e_road_lanes_laneSection_lcr_lane_roadMark_laneChange (const ::std::string& v);

        e_road_lanes_laneSection_lcr_lane_roadMark_laneChange (const ::xml_schema::string& v);

        e_road_lanes_laneSection_lcr_lane_roadMark_laneChange (const ::xercesc::DOMElement& e,
                                                               ::xml_schema::flags f = 0,
                                                               ::xml_schema::container* c = 0);

        e_road_lanes_laneSection_lcr_lane_roadMark_laneChange (const ::xercesc::DOMAttr& a,
                                                               ::xml_schema::flags f = 0,
                                                               ::xml_schema::container* c = 0);

        e_road_lanes_laneSection_lcr_lane_roadMark_laneChange (const ::std::string& s,
                                                               const ::xercesc::DOMElement* e,
                                                               ::xml_schema::flags f = 0,
                                                               ::xml_schema::container* c = 0);

        e_road_lanes_laneSection_lcr_lane_roadMark_laneChange (const e_road_lanes_laneSection_lcr_lane_roadMark_laneChange& x,
                                                               ::xml_schema::flags f = 0,
                                                               ::xml_schema::container* c = 0);

        virtual e_road_lanes_laneSection_lcr_lane_roadMark_laneChange*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        e_road_lanes_laneSection_lcr_lane_roadMark_laneChange&
        operator= (value v);

        virtual
        operator value () const
        {
          return _xsd_e_road_lanes_laneSection_lcr_lane_roadMark_laneChange_convert ();
        }

        protected:
        value
        _xsd_e_road_lanes_laneSection_lcr_lane_roadMark_laneChange_convert () const;

        public:
        static const char* const _xsd_e_road_lanes_laneSection_lcr_lane_roadMark_laneChange_literals_[4];
        static const value _xsd_e_road_lanes_laneSection_lcr_lane_roadMark_laneChange_indexes_[4];
      };

      class e_road_lanes_laneSection_lr_lane_access_rule: public ::xml_schema::string
      {
        public:
        enum value
        {
          allow,
          deny
        };

        e_road_lanes_laneSection_lr_lane_access_rule (value v);

        e_road_lanes_laneSection_lr_lane_access_rule (const char* v);

        e_road_lanes_laneSection_lr_lane_access_rule (const ::std::string& v);

        e_road_lanes_laneSection_lr_lane_access_rule (const ::xml_schema::string& v);

        e_road_lanes_laneSection_lr_lane_access_rule (const ::xercesc::DOMElement& e,
                                                      ::xml_schema::flags f = 0,
                                                      ::xml_schema::container* c = 0);

        e_road_lanes_laneSection_lr_lane_access_rule (const ::xercesc::DOMAttr& a,
                                                      ::xml_schema::flags f = 0,
                                                      ::xml_schema::container* c = 0);

        e_road_lanes_laneSection_lr_lane_access_rule (const ::std::string& s,
                                                      const ::xercesc::DOMElement* e,
                                                      ::xml_schema::flags f = 0,
                                                      ::xml_schema::container* c = 0);

        e_road_lanes_laneSection_lr_lane_access_rule (const e_road_lanes_laneSection_lr_lane_access_rule& x,
                                                      ::xml_schema::flags f = 0,
                                                      ::xml_schema::container* c = 0);

        virtual e_road_lanes_laneSection_lr_lane_access_rule*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        e_road_lanes_laneSection_lr_lane_access_rule&
        operator= (value v);

        virtual
        operator value () const
        {
          return _xsd_e_road_lanes_laneSection_lr_lane_access_rule_convert ();
        }

        protected:
        value
        _xsd_e_road_lanes_laneSection_lr_lane_access_rule_convert () const;

        public:
        static const char* const _xsd_e_road_lanes_laneSection_lr_lane_access_rule_literals_[2];
        static const value _xsd_e_road_lanes_laneSection_lr_lane_access_rule_indexes_[2];
      };

      class e_roadMarkColor: public ::xml_schema::string
      {
        public:
        enum value
        {
          standard,
          blue,
          green,
          red,
          white,
          yellow,
          orange
        };

        e_roadMarkColor (value v);

        e_roadMarkColor (const char* v);

        e_roadMarkColor (const ::std::string& v);

        e_roadMarkColor (const ::xml_schema::string& v);

        e_roadMarkColor (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        e_roadMarkColor (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        e_roadMarkColor (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        e_roadMarkColor (const e_roadMarkColor& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        virtual e_roadMarkColor*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        e_roadMarkColor&
        operator= (value v);

        virtual
        operator value () const
        {
          return _xsd_e_roadMarkColor_convert ();
        }

        protected:
        value
        _xsd_e_roadMarkColor_convert () const;

        public:
        static const char* const _xsd_e_roadMarkColor_literals_[7];
        static const value _xsd_e_roadMarkColor_indexes_[7];
      };

      class e_roadMarkRule: public ::xml_schema::string
      {
        public:
        enum value
        {
          no_passing,
          caution,
          none
        };

        e_roadMarkRule (value v);

        e_roadMarkRule (const char* v);

        e_roadMarkRule (const ::std::string& v);

        e_roadMarkRule (const ::xml_schema::string& v);

        e_roadMarkRule (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        e_roadMarkRule (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        e_roadMarkRule (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        e_roadMarkRule (const e_roadMarkRule& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        virtual e_roadMarkRule*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        e_roadMarkRule&
        operator= (value v);

        virtual
        operator value () const
        {
          return _xsd_e_roadMarkRule_convert ();
        }

        protected:
        value
        _xsd_e_roadMarkRule_convert () const;

        public:
        static const char* const _xsd_e_roadMarkRule_literals_[3];
        static const value _xsd_e_roadMarkRule_indexes_[3];
      };

      class e_roadMarkType: public ::xml_schema::string
      {
        public:
        enum value
        {
          none,
          solid,
          broken,
          solid_solid,
          solid_broken,
          broken_solid,
          broken_broken,
          botts_dots,
          grass,
          curb,
          custom,
          edge
        };

        e_roadMarkType (value v);

        e_roadMarkType (const char* v);

        e_roadMarkType (const ::std::string& v);

        e_roadMarkType (const ::xml_schema::string& v);

        e_roadMarkType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        e_roadMarkType (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        e_roadMarkType (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        e_roadMarkType (const e_roadMarkType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        virtual e_roadMarkType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        e_roadMarkType&
        operator= (value v);

        virtual
        operator value () const
        {
          return _xsd_e_roadMarkType_convert ();
        }

        protected:
        value
        _xsd_e_roadMarkType_convert () const;

        public:
        static const char* const _xsd_e_roadMarkType_literals_[12];
        static const value _xsd_e_roadMarkType_indexes_[12];
      };

      class e_roadMarkWeight: public ::xml_schema::string
      {
        public:
        enum value
        {
          standard,
          bold
        };

        e_roadMarkWeight (value v);

        e_roadMarkWeight (const char* v);

        e_roadMarkWeight (const ::std::string& v);

        e_roadMarkWeight (const ::xml_schema::string& v);

        e_roadMarkWeight (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

        e_roadMarkWeight (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

        e_roadMarkWeight (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

        e_roadMarkWeight (const e_roadMarkWeight& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

        virtual e_roadMarkWeight*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        e_roadMarkWeight&
        operator= (value v);

        virtual
        operator value () const
        {
          return _xsd_e_roadMarkWeight_convert ();
        }

        protected:
        value
        _xsd_e_roadMarkWeight_convert () const;

        public:
        static const char* const _xsd_e_roadMarkWeight_literals_[2];
        static const value _xsd_e_roadMarkWeight_indexes_[2];
      };

      class t_bool: public ::xml_schema::string
      {
        public:
        enum value
        {
          true_,
          false_
        };

        t_bool (value v);

        t_bool (const char* v);

        t_bool (const ::std::string& v);

        t_bool (const ::xml_schema::string& v);

        t_bool (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        t_bool (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        t_bool (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        t_bool (const t_bool& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        virtual t_bool*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_bool&
        operator= (value v);

        virtual
        operator value () const
        {
          return _xsd_t_bool_convert ();
        }

        protected:
        value
        _xsd_t_bool_convert () const;

        public:
        static const char* const _xsd_t_bool_literals_[2];
        static const value _xsd_t_bool_indexes_[2];
      };

      class t_road_lanes: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // laneOffset
        //
        typedef ::simulation::standard::opendrive_schema::t_road_lanes_laneOffset laneOffset_type;
        typedef ::xsd::cxx::tree::sequence< laneOffset_type > laneOffset_sequence;
        typedef laneOffset_sequence::iterator laneOffset_iterator;
        typedef laneOffset_sequence::const_iterator laneOffset_const_iterator;
        typedef ::xsd::cxx::tree::traits< laneOffset_type, char > laneOffset_traits;

        const laneOffset_sequence&
        laneOffset () const;

        laneOffset_sequence&
        laneOffset ();

        void
        laneOffset (const laneOffset_sequence& s);

        // laneSection
        //
        typedef ::simulation::standard::opendrive_schema::t_road_lanes_laneSection laneSection_type;
        typedef ::xsd::cxx::tree::sequence< laneSection_type > laneSection_sequence;
        typedef laneSection_sequence::iterator laneSection_iterator;
        typedef laneSection_sequence::const_iterator laneSection_const_iterator;
        typedef ::xsd::cxx::tree::traits< laneSection_type, char > laneSection_traits;

        const laneSection_sequence&
        laneSection () const;

        laneSection_sequence&
        laneSection ();

        void
        laneSection (const laneSection_sequence& s);

        // include
        //
        typedef ::simulation::standard::opendrive_schema::t_include include_type;
        typedef ::xsd::cxx::tree::sequence< include_type > include_sequence;
        typedef include_sequence::iterator include_iterator;
        typedef include_sequence::const_iterator include_const_iterator;
        typedef ::xsd::cxx::tree::traits< include_type, char > include_traits;

        const include_sequence&
        include () const;

        include_sequence&
        include ();

        void
        include (const include_sequence& s);

        // userData
        //
        typedef ::simulation::standard::opendrive_schema::t_userData userData_type;
        typedef ::xsd::cxx::tree::sequence< userData_type > userData_sequence;
        typedef userData_sequence::iterator userData_iterator;
        typedef userData_sequence::const_iterator userData_const_iterator;
        typedef ::xsd::cxx::tree::traits< userData_type, char > userData_traits;

        const userData_sequence&
        userData () const;

        userData_sequence&
        userData ();

        void
        userData (const userData_sequence& s);

        // dataQuality
        //
        typedef ::simulation::standard::opendrive_schema::t_dataQuality dataQuality_type;
        typedef ::xsd::cxx::tree::sequence< dataQuality_type > dataQuality_sequence;
        typedef dataQuality_sequence::iterator dataQuality_iterator;
        typedef dataQuality_sequence::const_iterator dataQuality_const_iterator;
        typedef ::xsd::cxx::tree::traits< dataQuality_type, char > dataQuality_traits;

        const dataQuality_sequence&
        dataQuality () const;

        dataQuality_sequence&
        dataQuality ();

        void
        dataQuality (const dataQuality_sequence& s);

        // Constructors.
        //
        t_road_lanes ();

        t_road_lanes (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        t_road_lanes (const t_road_lanes& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        virtual t_road_lanes*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_lanes&
        operator= (const t_road_lanes& x);

        virtual 
        ~t_road_lanes ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        laneOffset_sequence laneOffset_;
        laneSection_sequence laneSection_;
        include_sequence include_;
        userData_sequence userData_;
        dataQuality_sequence dataQuality_;
      };

      class t_road_lanes_laneOffset: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // s
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero s_type;
        typedef ::xsd::cxx::tree::traits< s_type, char > s_traits;

        const s_type&
        s () const;

        s_type&
        s ();

        void
        s (const s_type& x);

        void
        s (::std::unique_ptr< s_type > p);

        // a
        //
        typedef ::xml_schema::double_ a_type;
        typedef ::xsd::cxx::tree::traits< a_type, char, ::xsd::cxx::tree::schema_type::double_ > a_traits;

        const a_type&
        a () const;

        a_type&
        a ();

        void
        a (const a_type& x);

        // b
        //
        typedef ::xml_schema::double_ b_type;
        typedef ::xsd::cxx::tree::traits< b_type, char, ::xsd::cxx::tree::schema_type::double_ > b_traits;

        const b_type&
        b () const;

        b_type&
        b ();

        void
        b (const b_type& x);

        // c
        //
        typedef ::xml_schema::double_ c_type;
        typedef ::xsd::cxx::tree::traits< c_type, char, ::xsd::cxx::tree::schema_type::double_ > c_traits;

        const c_type&
        c () const;

        c_type&
        c ();

        void
        c (const c_type& x);

        // d
        //
        typedef ::xml_schema::double_ d_type;
        typedef ::xsd::cxx::tree::traits< d_type, char, ::xsd::cxx::tree::schema_type::double_ > d_traits;

        const d_type&
        d () const;

        d_type&
        d ();

        void
        d (const d_type& x);

        // Constructors.
        //
        t_road_lanes_laneOffset (const s_type&,
                                 const a_type&,
                                 const b_type&,
                                 const c_type&,
                                 const d_type&);

        t_road_lanes_laneOffset (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

        t_road_lanes_laneOffset (const t_road_lanes_laneOffset& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

        virtual t_road_lanes_laneOffset*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_lanes_laneOffset&
        operator= (const t_road_lanes_laneOffset& x);

        virtual 
        ~t_road_lanes_laneOffset ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< s_type > s_;
        ::xsd::cxx::tree::one< a_type > a_;
        ::xsd::cxx::tree::one< b_type > b_;
        ::xsd::cxx::tree::one< c_type > c_;
        ::xsd::cxx::tree::one< d_type > d_;
      };

      class t_road_lanes_laneSection: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // left
        //
        typedef ::simulation::standard::opendrive_schema::t_road_lanes_laneSection_left left_type;
        typedef ::xsd::cxx::tree::optional< left_type > left_optional;
        typedef ::xsd::cxx::tree::traits< left_type, char > left_traits;

        const left_optional&
        left () const;

        left_optional&
        left ();

        void
        left (const left_type& x);

        void
        left (const left_optional& x);

        void
        left (::std::unique_ptr< left_type > p);

        // center
        //
        typedef ::simulation::standard::opendrive_schema::t_road_lanes_laneSection_center center_type;
        typedef ::xsd::cxx::tree::traits< center_type, char > center_traits;

        const center_type&
        center () const;

        center_type&
        center ();

        void
        center (const center_type& x);

        void
        center (::std::unique_ptr< center_type > p);

        // right
        //
        typedef ::simulation::standard::opendrive_schema::t_road_lanes_laneSection_right right_type;
        typedef ::xsd::cxx::tree::optional< right_type > right_optional;
        typedef ::xsd::cxx::tree::traits< right_type, char > right_traits;

        const right_optional&
        right () const;

        right_optional&
        right ();

        void
        right (const right_type& x);

        void
        right (const right_optional& x);

        void
        right (::std::unique_ptr< right_type > p);

        // include
        //
        typedef ::simulation::standard::opendrive_schema::t_include include_type;
        typedef ::xsd::cxx::tree::sequence< include_type > include_sequence;
        typedef include_sequence::iterator include_iterator;
        typedef include_sequence::const_iterator include_const_iterator;
        typedef ::xsd::cxx::tree::traits< include_type, char > include_traits;

        const include_sequence&
        include () const;

        include_sequence&
        include ();

        void
        include (const include_sequence& s);

        // userData
        //
        typedef ::simulation::standard::opendrive_schema::t_userData userData_type;
        typedef ::xsd::cxx::tree::sequence< userData_type > userData_sequence;
        typedef userData_sequence::iterator userData_iterator;
        typedef userData_sequence::const_iterator userData_const_iterator;
        typedef ::xsd::cxx::tree::traits< userData_type, char > userData_traits;

        const userData_sequence&
        userData () const;

        userData_sequence&
        userData ();

        void
        userData (const userData_sequence& s);

        // dataQuality
        //
        typedef ::simulation::standard::opendrive_schema::t_dataQuality dataQuality_type;
        typedef ::xsd::cxx::tree::sequence< dataQuality_type > dataQuality_sequence;
        typedef dataQuality_sequence::iterator dataQuality_iterator;
        typedef dataQuality_sequence::const_iterator dataQuality_const_iterator;
        typedef ::xsd::cxx::tree::traits< dataQuality_type, char > dataQuality_traits;

        const dataQuality_sequence&
        dataQuality () const;

        dataQuality_sequence&
        dataQuality ();

        void
        dataQuality (const dataQuality_sequence& s);

        // s
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero s_type;
        typedef ::xsd::cxx::tree::traits< s_type, char > s_traits;

        const s_type&
        s () const;

        s_type&
        s ();

        void
        s (const s_type& x);

        void
        s (::std::unique_ptr< s_type > p);

        // singleSide
        //
        typedef ::simulation::standard::opendrive_schema::t_bool singleSide_type;
        typedef ::xsd::cxx::tree::optional< singleSide_type > singleSide_optional;
        typedef ::xsd::cxx::tree::traits< singleSide_type, char > singleSide_traits;

        const singleSide_optional&
        singleSide () const;

        singleSide_optional&
        singleSide ();

        void
        singleSide (const singleSide_type& x);

        void
        singleSide (const singleSide_optional& x);

        void
        singleSide (::std::unique_ptr< singleSide_type > p);

        // Constructors.
        //
        t_road_lanes_laneSection (const center_type&,
                                  const s_type&);

        t_road_lanes_laneSection (::std::unique_ptr< center_type >,
                                  const s_type&);

        t_road_lanes_laneSection (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

        t_road_lanes_laneSection (const t_road_lanes_laneSection& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

        virtual t_road_lanes_laneSection*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_lanes_laneSection&
        operator= (const t_road_lanes_laneSection& x);

        virtual 
        ~t_road_lanes_laneSection ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        left_optional left_;
        ::xsd::cxx::tree::one< center_type > center_;
        right_optional right_;
        include_sequence include_;
        userData_sequence userData_;
        dataQuality_sequence dataQuality_;
        ::xsd::cxx::tree::one< s_type > s_;
        singleSide_optional singleSide_;
      };

      class t_road_lanes_laneSection_center: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // lane
        //
        typedef ::simulation::standard::opendrive_schema::t_road_lanes_laneSection_center_lane lane_type;
        typedef ::xsd::cxx::tree::sequence< lane_type > lane_sequence;
        typedef lane_sequence::iterator lane_iterator;
        typedef lane_sequence::const_iterator lane_const_iterator;
        typedef ::xsd::cxx::tree::traits< lane_type, char > lane_traits;

        const lane_sequence&
        lane () const;

        lane_sequence&
        lane ();

        void
        lane (const lane_sequence& s);

        // include
        //
        typedef ::simulation::standard::opendrive_schema::t_include include_type;
        typedef ::xsd::cxx::tree::sequence< include_type > include_sequence;
        typedef include_sequence::iterator include_iterator;
        typedef include_sequence::const_iterator include_const_iterator;
        typedef ::xsd::cxx::tree::traits< include_type, char > include_traits;

        const include_sequence&
        include () const;

        include_sequence&
        include ();

        void
        include (const include_sequence& s);

        // userData
        //
        typedef ::simulation::standard::opendrive_schema::t_userData userData_type;
        typedef ::xsd::cxx::tree::sequence< userData_type > userData_sequence;
        typedef userData_sequence::iterator userData_iterator;
        typedef userData_sequence::const_iterator userData_const_iterator;
        typedef ::xsd::cxx::tree::traits< userData_type, char > userData_traits;

        const userData_sequence&
        userData () const;

        userData_sequence&
        userData ();

        void
        userData (const userData_sequence& s);

        // dataQuality
        //
        typedef ::simulation::standard::opendrive_schema::t_dataQuality dataQuality_type;
        typedef ::xsd::cxx::tree::sequence< dataQuality_type > dataQuality_sequence;
        typedef dataQuality_sequence::iterator dataQuality_iterator;
        typedef dataQuality_sequence::const_iterator dataQuality_const_iterator;
        typedef ::xsd::cxx::tree::traits< dataQuality_type, char > dataQuality_traits;

        const dataQuality_sequence&
        dataQuality () const;

        dataQuality_sequence&
        dataQuality ();

        void
        dataQuality (const dataQuality_sequence& s);

        // Constructors.
        //
        t_road_lanes_laneSection_center ();

        t_road_lanes_laneSection_center (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

        t_road_lanes_laneSection_center (const t_road_lanes_laneSection_center& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

        virtual t_road_lanes_laneSection_center*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_lanes_laneSection_center&
        operator= (const t_road_lanes_laneSection_center& x);

        virtual 
        ~t_road_lanes_laneSection_center ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        lane_sequence lane_;
        include_sequence include_;
        userData_sequence userData_;
        dataQuality_sequence dataQuality_;
      };

      class t_road_lanes_laneSection_lr_lane: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // link
        //
        typedef ::simulation::standard::opendrive_schema::t_road_lanes_laneSection_lcr_lane_link link_type;
        typedef ::xsd::cxx::tree::optional< link_type > link_optional;
        typedef ::xsd::cxx::tree::traits< link_type, char > link_traits;

        const link_optional&
        lane_link () const;

        link_optional&
        lane_link ();

        void
        lane_link (const link_type& x);

        void
        lane_link (const link_optional& x);

        void
        lane_link (::std::unique_ptr< link_type > p);

        // border
        //
        typedef ::simulation::standard::opendrive_schema::t_road_lanes_laneSection_lr_lane_border border_type;
        typedef ::xsd::cxx::tree::sequence< border_type > border_sequence;
        typedef border_sequence::iterator border_iterator;
        typedef border_sequence::const_iterator border_const_iterator;
        typedef ::xsd::cxx::tree::traits< border_type, char > border_traits;

        const border_sequence&
        border () const;

        border_sequence&
        border ();

        void
        border (const border_sequence& s);

        // width
        //
        typedef ::simulation::standard::opendrive_schema::t_road_lanes_laneSection_lr_lane_width width_type;
        typedef ::xsd::cxx::tree::sequence< width_type > width_sequence;
        typedef width_sequence::iterator width_iterator;
        typedef width_sequence::const_iterator width_const_iterator;
        typedef ::xsd::cxx::tree::traits< width_type, char > width_traits;

        const width_sequence&
        width () const;

        width_sequence&
        width ();

        void
        width (const width_sequence& s);

        // roadMark
        //
        typedef ::simulation::standard::opendrive_schema::t_road_lanes_laneSection_lcr_lane_roadMark roadMark_type;
        typedef ::xsd::cxx::tree::sequence< roadMark_type > roadMark_sequence;
        typedef roadMark_sequence::iterator roadMark_iterator;
        typedef roadMark_sequence::const_iterator roadMark_const_iterator;
        typedef ::xsd::cxx::tree::traits< roadMark_type, char > roadMark_traits;

        const roadMark_sequence&
        roadMark () const;

        roadMark_sequence&
        roadMark ();

        void
        roadMark (const roadMark_sequence& s);

        // material
        //
        typedef ::simulation::standard::opendrive_schema::t_road_lanes_laneSection_lr_lane_material material_type;
        typedef ::xsd::cxx::tree::sequence< material_type > material_sequence;
        typedef material_sequence::iterator material_iterator;
        typedef material_sequence::const_iterator material_const_iterator;
        typedef ::xsd::cxx::tree::traits< material_type, char > material_traits;

        const material_sequence&
        material () const;

        material_sequence&
        material ();

        void
        material (const material_sequence& s);

        // speed
        //
        typedef ::simulation::standard::opendrive_schema::t_road_lanes_laneSection_lr_lane_speed speed_type;
        typedef ::xsd::cxx::tree::sequence< speed_type > speed_sequence;
        typedef speed_sequence::iterator speed_iterator;
        typedef speed_sequence::const_iterator speed_const_iterator;
        typedef ::xsd::cxx::tree::traits< speed_type, char > speed_traits;

        const speed_sequence&
        speed () const;

        speed_sequence&
        speed ();

        void
        speed (const speed_sequence& s);

        // access
        //
        typedef ::simulation::standard::opendrive_schema::t_road_lanes_laneSection_lr_lane_access access_type;
        typedef ::xsd::cxx::tree::sequence< access_type > access_sequence;
        typedef access_sequence::iterator access_iterator;
        typedef access_sequence::const_iterator access_const_iterator;
        typedef ::xsd::cxx::tree::traits< access_type, char > access_traits;

        const access_sequence&
        parkingSpace_access () const;

        access_sequence&
        parkingSpace_access ();

        void
        parkingSpace_access (const access_sequence& s);

        // height
        //
        typedef ::simulation::standard::opendrive_schema::t_road_lanes_laneSection_lr_lane_height height_type;
        typedef ::xsd::cxx::tree::sequence< height_type > height_sequence;
        typedef height_sequence::iterator height_iterator;
        typedef height_sequence::const_iterator height_const_iterator;
        typedef ::xsd::cxx::tree::traits< height_type, char > height_traits;

        const height_sequence&
        height () const;

        height_sequence&
        height ();

        void
        height (const height_sequence& s);

        // rule
        //
        typedef ::simulation::standard::opendrive_schema::t_road_lanes_laneSection_lr_lane_rule rule_type;
        typedef ::xsd::cxx::tree::sequence< rule_type > rule_sequence;
        typedef rule_sequence::iterator rule_iterator;
        typedef rule_sequence::const_iterator rule_const_iterator;
        typedef ::xsd::cxx::tree::traits< rule_type, char > rule_traits;

        const rule_sequence&
        rule () const;

        rule_sequence&
        rule ();

        void
        rule (const rule_sequence& s);

        // include
        //
        typedef ::simulation::standard::opendrive_schema::t_include include_type;
        typedef ::xsd::cxx::tree::sequence< include_type > include_sequence;
        typedef include_sequence::iterator include_iterator;
        typedef include_sequence::const_iterator include_const_iterator;
        typedef ::xsd::cxx::tree::traits< include_type, char > include_traits;

        const include_sequence&
        include () const;

        include_sequence&
        include ();

        void
        include (const include_sequence& s);

        // userData
        //
        typedef ::simulation::standard::opendrive_schema::t_userData userData_type;
        typedef ::xsd::cxx::tree::sequence< userData_type > userData_sequence;
        typedef userData_sequence::iterator userData_iterator;
        typedef userData_sequence::const_iterator userData_const_iterator;
        typedef ::xsd::cxx::tree::traits< userData_type, char > userData_traits;

        const userData_sequence&
        userData () const;

        userData_sequence&
        userData ();

        void
        userData (const userData_sequence& s);

        // dataQuality
        //
        typedef ::simulation::standard::opendrive_schema::t_dataQuality dataQuality_type;
        typedef ::xsd::cxx::tree::sequence< dataQuality_type > dataQuality_sequence;
        typedef dataQuality_sequence::iterator dataQuality_iterator;
        typedef dataQuality_sequence::const_iterator dataQuality_const_iterator;
        typedef ::xsd::cxx::tree::traits< dataQuality_type, char > dataQuality_traits;

        const dataQuality_sequence&
        dataQuality () const;

        dataQuality_sequence&
        dataQuality ();

        void
        dataQuality (const dataQuality_sequence& s);

        // type
        //
        typedef ::simulation::standard::opendrive_schema::e_laneType type_type;
        typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

        const type_type&
        type () const;

        type_type&
        type ();

        void
        type (const type_type& x);

        void
        type (::std::unique_ptr< type_type > p);

        // level
        //
        typedef ::simulation::standard::opendrive_schema::t_bool level_type;
        typedef ::xsd::cxx::tree::optional< level_type > level_optional;
        typedef ::xsd::cxx::tree::traits< level_type, char > level_traits;

        const level_optional&
        level () const;

        level_optional&
        level ();

        void
        level (const level_type& x);

        void
        level (const level_optional& x);

        void
        level (::std::unique_ptr< level_type > p);

        // Constructors.
        //
        t_road_lanes_laneSection_lr_lane (const type_type&);

        t_road_lanes_laneSection_lr_lane (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

        t_road_lanes_laneSection_lr_lane (const t_road_lanes_laneSection_lr_lane& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

        virtual t_road_lanes_laneSection_lr_lane*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_lanes_laneSection_lr_lane&
        operator= (const t_road_lanes_laneSection_lr_lane& x);

        virtual 
        ~t_road_lanes_laneSection_lr_lane ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        link_optional lane_link_;
        border_sequence border_;
        width_sequence width_;
        roadMark_sequence roadMark_;
        material_sequence material_;
        speed_sequence speed_;
        access_sequence parkingSpace_access_;
        height_sequence height_;
        rule_sequence rule_;
        include_sequence include_;
        userData_sequence userData_;
        dataQuality_sequence dataQuality_;
        ::xsd::cxx::tree::one< type_type > type_;
        level_optional level_;
      };

      class t_road_lanes_laneSection_center_lane: public ::simulation::standard::opendrive_schema::t_road_lanes_laneSection_lr_lane
      {
        public:
        // id
        //
        typedef ::xml_schema::integer id_type;
        typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

        const id_type&
        id () const;

        static id_type
        id_default_value ();

        // Constructors.
        //
        t_road_lanes_laneSection_center_lane (const type_type&);

        t_road_lanes_laneSection_center_lane (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

        t_road_lanes_laneSection_center_lane (const t_road_lanes_laneSection_center_lane& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

        virtual t_road_lanes_laneSection_center_lane*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_lanes_laneSection_center_lane&
        operator= (const t_road_lanes_laneSection_center_lane& x);

        virtual 
        ~t_road_lanes_laneSection_center_lane ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< id_type > id_;
      };

      class t_road_lanes_laneSection_lcr_lane_link: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // predecessor
        //
        typedef ::simulation::standard::opendrive_schema::t_road_lanes_laneSection_lcr_lane_link_predecessorSuccessor predecessor_type;
        typedef ::xsd::cxx::tree::sequence< predecessor_type > predecessor_sequence;
        typedef predecessor_sequence::iterator predecessor_iterator;
        typedef predecessor_sequence::const_iterator predecessor_const_iterator;
        typedef ::xsd::cxx::tree::traits< predecessor_type, char > predecessor_traits;

        const predecessor_sequence&
        predecessor () const;

        predecessor_sequence&
        predecessor ();

        void
        predecessor (const predecessor_sequence& s);

        // successor
        //
        typedef ::simulation::standard::opendrive_schema::t_road_lanes_laneSection_lcr_lane_link_predecessorSuccessor successor_type;
        typedef ::xsd::cxx::tree::sequence< successor_type > successor_sequence;
        typedef successor_sequence::iterator successor_iterator;
        typedef successor_sequence::const_iterator successor_const_iterator;
        typedef ::xsd::cxx::tree::traits< successor_type, char > successor_traits;

        const successor_sequence&
        successor () const;

        successor_sequence&
        successor ();

        void
        successor (const successor_sequence& s);

        // include
        //
        typedef ::simulation::standard::opendrive_schema::t_include include_type;
        typedef ::xsd::cxx::tree::sequence< include_type > include_sequence;
        typedef include_sequence::iterator include_iterator;
        typedef include_sequence::const_iterator include_const_iterator;
        typedef ::xsd::cxx::tree::traits< include_type, char > include_traits;

        const include_sequence&
        include () const;

        include_sequence&
        include ();

        void
        include (const include_sequence& s);

        // userData
        //
        typedef ::simulation::standard::opendrive_schema::t_userData userData_type;
        typedef ::xsd::cxx::tree::sequence< userData_type > userData_sequence;
        typedef userData_sequence::iterator userData_iterator;
        typedef userData_sequence::const_iterator userData_const_iterator;
        typedef ::xsd::cxx::tree::traits< userData_type, char > userData_traits;

        const userData_sequence&
        userData () const;

        userData_sequence&
        userData ();

        void
        userData (const userData_sequence& s);

        // dataQuality
        //
        typedef ::simulation::standard::opendrive_schema::t_dataQuality dataQuality_type;
        typedef ::xsd::cxx::tree::sequence< dataQuality_type > dataQuality_sequence;
        typedef dataQuality_sequence::iterator dataQuality_iterator;
        typedef dataQuality_sequence::const_iterator dataQuality_const_iterator;
        typedef ::xsd::cxx::tree::traits< dataQuality_type, char > dataQuality_traits;

        const dataQuality_sequence&
        dataQuality () const;

        dataQuality_sequence&
        dataQuality ();

        void
        dataQuality (const dataQuality_sequence& s);

        // Constructors.
        //
        t_road_lanes_laneSection_lcr_lane_link ();

        t_road_lanes_laneSection_lcr_lane_link (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

        t_road_lanes_laneSection_lcr_lane_link (const t_road_lanes_laneSection_lcr_lane_link& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

        virtual t_road_lanes_laneSection_lcr_lane_link*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_lanes_laneSection_lcr_lane_link&
        operator= (const t_road_lanes_laneSection_lcr_lane_link& x);

        virtual 
        ~t_road_lanes_laneSection_lcr_lane_link ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        predecessor_sequence predecessor_;
        successor_sequence successor_;
        include_sequence include_;
        userData_sequence userData_;
        dataQuality_sequence dataQuality_;
      };

      class t_road_lanes_laneSection_lcr_lane_link_predecessorSuccessor: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // id
        //
        typedef ::xml_schema::integer id_type;
        typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

        const id_type&
        id () const;

        id_type&
        id ();

        void
        id (const id_type& x);

        // Constructors.
        //
        t_road_lanes_laneSection_lcr_lane_link_predecessorSuccessor (const id_type&);

        t_road_lanes_laneSection_lcr_lane_link_predecessorSuccessor (const ::xercesc::DOMElement& e,
                                                                     ::xml_schema::flags f = 0,
                                                                     ::xml_schema::container* c = 0);

        t_road_lanes_laneSection_lcr_lane_link_predecessorSuccessor (const t_road_lanes_laneSection_lcr_lane_link_predecessorSuccessor& x,
                                                                     ::xml_schema::flags f = 0,
                                                                     ::xml_schema::container* c = 0);

        virtual t_road_lanes_laneSection_lcr_lane_link_predecessorSuccessor*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_lanes_laneSection_lcr_lane_link_predecessorSuccessor&
        operator= (const t_road_lanes_laneSection_lcr_lane_link_predecessorSuccessor& x);

        virtual 
        ~t_road_lanes_laneSection_lcr_lane_link_predecessorSuccessor ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< id_type > id_;
      };

      class t_road_lanes_laneSection_lcr_lane_roadMark: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // sway
        //
        typedef ::simulation::standard::opendrive_schema::t_road_lanes_laneSection_lcr_lane_roadMark_sway sway_type;
        typedef ::xsd::cxx::tree::sequence< sway_type > sway_sequence;
        typedef sway_sequence::iterator sway_iterator;
        typedef sway_sequence::const_iterator sway_const_iterator;
        typedef ::xsd::cxx::tree::traits< sway_type, char > sway_traits;

        const sway_sequence&
        sway () const;

        sway_sequence&
        sway ();

        void
        sway (const sway_sequence& s);

        // type
        //
        typedef ::simulation::standard::opendrive_schema::t_road_lanes_laneSection_lcr_lane_roadMark_type type_type;
        typedef ::xsd::cxx::tree::optional< type_type > type_optional;
        typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

        const type_optional&
        type () const;

        type_optional&
        type ();

        void
        type (const type_type& x);

        void
        type (const type_optional& x);

        void
        type (::std::unique_ptr< type_type > p);

        // explicit
        //
        typedef ::simulation::standard::opendrive_schema::t_road_lanes_laneSection_lcr_lane_roadMark_explicit explicit_type;
        typedef ::xsd::cxx::tree::optional< explicit_type > explicit_optional;
        typedef ::xsd::cxx::tree::traits< explicit_type, char > explicit_traits;

        const explicit_optional&
        explicit_ () const;

        explicit_optional&
        explicit_ ();

        void
        explicit_ (const explicit_type& x);

        void
        explicit_ (const explicit_optional& x);

        void
        explicit_ (::std::unique_ptr< explicit_type > p);

        // include
        //
        typedef ::simulation::standard::opendrive_schema::t_include include_type;
        typedef ::xsd::cxx::tree::sequence< include_type > include_sequence;
        typedef include_sequence::iterator include_iterator;
        typedef include_sequence::const_iterator include_const_iterator;
        typedef ::xsd::cxx::tree::traits< include_type, char > include_traits;

        const include_sequence&
        include () const;

        include_sequence&
        include ();

        void
        include (const include_sequence& s);

        // userData
        //
        typedef ::simulation::standard::opendrive_schema::t_userData userData_type;
        typedef ::xsd::cxx::tree::sequence< userData_type > userData_sequence;
        typedef userData_sequence::iterator userData_iterator;
        typedef userData_sequence::const_iterator userData_const_iterator;
        typedef ::xsd::cxx::tree::traits< userData_type, char > userData_traits;

        const userData_sequence&
        userData () const;

        userData_sequence&
        userData ();

        void
        userData (const userData_sequence& s);

        // dataQuality
        //
        typedef ::simulation::standard::opendrive_schema::t_dataQuality dataQuality_type;
        typedef ::xsd::cxx::tree::sequence< dataQuality_type > dataQuality_sequence;
        typedef dataQuality_sequence::iterator dataQuality_iterator;
        typedef dataQuality_sequence::const_iterator dataQuality_const_iterator;
        typedef ::xsd::cxx::tree::traits< dataQuality_type, char > dataQuality_traits;

        const dataQuality_sequence&
        dataQuality () const;

        dataQuality_sequence&
        dataQuality ();

        void
        dataQuality (const dataQuality_sequence& s);

        // sOffset
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero sOffset_type;
        typedef ::xsd::cxx::tree::traits< sOffset_type, char > sOffset_traits;

        const sOffset_type&
        sOffset () const;

        sOffset_type&
        sOffset ();

        void
        sOffset (const sOffset_type& x);

        void
        sOffset (::std::unique_ptr< sOffset_type > p);

        // type
        //
        typedef ::simulation::standard::opendrive_schema::e_roadMarkType type1_type;
        typedef ::xsd::cxx::tree::traits< type1_type, char > type1_traits;

        const type1_type&
        type1 () const;

        type1_type&
        type1 ();

        void
        type1 (const type1_type& x);

        void
        type1 (::std::unique_ptr< type1_type > p);

        // weight
        //
        typedef ::simulation::standard::opendrive_schema::e_roadMarkWeight weight_type;
        typedef ::xsd::cxx::tree::optional< weight_type > weight_optional;
        typedef ::xsd::cxx::tree::traits< weight_type, char > weight_traits;

        const weight_optional&
        weight () const;

        weight_optional&
        weight ();

        void
        weight (const weight_type& x);

        void
        weight (const weight_optional& x);

        void
        weight (::std::unique_ptr< weight_type > p);

        // color
        //
        typedef ::simulation::standard::opendrive_schema::e_roadMarkColor color_type;
        typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

        const color_type&
        color () const;

        color_type&
        color ();

        void
        color (const color_type& x);

        void
        color (::std::unique_ptr< color_type > p);

        // material
        //
        typedef ::xml_schema::string material_type;
        typedef ::xsd::cxx::tree::optional< material_type > material_optional;
        typedef ::xsd::cxx::tree::traits< material_type, char > material_traits;

        const material_optional&
        material () const;

        material_optional&
        material ();

        void
        material (const material_type& x);

        void
        material (const material_optional& x);

        void
        material (::std::unique_ptr< material_type > p);

        // width
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero width_type;
        typedef ::xsd::cxx::tree::optional< width_type > width_optional;
        typedef ::xsd::cxx::tree::traits< width_type, char > width_traits;

        const width_optional&
        width () const;

        width_optional&
        width ();

        void
        width (const width_type& x);

        void
        width (const width_optional& x);

        void
        width (::std::unique_ptr< width_type > p);

        // laneChange
        //
        typedef ::simulation::standard::opendrive_schema::e_road_lanes_laneSection_lcr_lane_roadMark_laneChange laneChange_type;
        typedef ::xsd::cxx::tree::optional< laneChange_type > laneChange_optional;
        typedef ::xsd::cxx::tree::traits< laneChange_type, char > laneChange_traits;

        const laneChange_optional&
        laneChange () const;

        laneChange_optional&
        laneChange ();

        void
        laneChange (const laneChange_type& x);

        void
        laneChange (const laneChange_optional& x);

        void
        laneChange (::std::unique_ptr< laneChange_type > p);

        // height
        //
        typedef ::xml_schema::double_ height_type;
        typedef ::xsd::cxx::tree::optional< height_type > height_optional;
        typedef ::xsd::cxx::tree::traits< height_type, char, ::xsd::cxx::tree::schema_type::double_ > height_traits;

        const height_optional&
        height () const;

        height_optional&
        height ();

        void
        height (const height_type& x);

        void
        height (const height_optional& x);

        // Constructors.
        //
        t_road_lanes_laneSection_lcr_lane_roadMark (const sOffset_type&,
                                                    const type1_type&,
                                                    const color_type&);

        t_road_lanes_laneSection_lcr_lane_roadMark (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

        t_road_lanes_laneSection_lcr_lane_roadMark (const t_road_lanes_laneSection_lcr_lane_roadMark& x,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

        virtual t_road_lanes_laneSection_lcr_lane_roadMark*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_lanes_laneSection_lcr_lane_roadMark&
        operator= (const t_road_lanes_laneSection_lcr_lane_roadMark& x);

        virtual 
        ~t_road_lanes_laneSection_lcr_lane_roadMark ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        sway_sequence sway_;
        type_optional type_;
        explicit_optional explicit__;
        include_sequence include_;
        userData_sequence userData_;
        dataQuality_sequence dataQuality_;
        ::xsd::cxx::tree::one< sOffset_type > sOffset_;
        ::xsd::cxx::tree::one< type1_type > type1_;
        weight_optional weight_;
        ::xsd::cxx::tree::one< color_type > color_;
        material_optional material_;
        width_optional width_;
        laneChange_optional laneChange_;
        height_optional height_;
      };

      class t_road_lanes_laneSection_lcr_lane_roadMark_explicit: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // line
        //
        typedef ::simulation::standard::opendrive_schema::t_road_lanes_laneSection_lcr_lane_roadMark_explicit_line line_type;
        typedef ::xsd::cxx::tree::sequence< line_type > line_sequence;
        typedef line_sequence::iterator line_iterator;
        typedef line_sequence::const_iterator line_const_iterator;
        typedef ::xsd::cxx::tree::traits< line_type, char > line_traits;

        const line_sequence&
        line () const;

        line_sequence&
        line ();

        void
        line (const line_sequence& s);

        // include
        //
        typedef ::simulation::standard::opendrive_schema::t_include include_type;
        typedef ::xsd::cxx::tree::sequence< include_type > include_sequence;
        typedef include_sequence::iterator include_iterator;
        typedef include_sequence::const_iterator include_const_iterator;
        typedef ::xsd::cxx::tree::traits< include_type, char > include_traits;

        const include_sequence&
        include () const;

        include_sequence&
        include ();

        void
        include (const include_sequence& s);

        // userData
        //
        typedef ::simulation::standard::opendrive_schema::t_userData userData_type;
        typedef ::xsd::cxx::tree::sequence< userData_type > userData_sequence;
        typedef userData_sequence::iterator userData_iterator;
        typedef userData_sequence::const_iterator userData_const_iterator;
        typedef ::xsd::cxx::tree::traits< userData_type, char > userData_traits;

        const userData_sequence&
        userData () const;

        userData_sequence&
        userData ();

        void
        userData (const userData_sequence& s);

        // dataQuality
        //
        typedef ::simulation::standard::opendrive_schema::t_dataQuality dataQuality_type;
        typedef ::xsd::cxx::tree::sequence< dataQuality_type > dataQuality_sequence;
        typedef dataQuality_sequence::iterator dataQuality_iterator;
        typedef dataQuality_sequence::const_iterator dataQuality_const_iterator;
        typedef ::xsd::cxx::tree::traits< dataQuality_type, char > dataQuality_traits;

        const dataQuality_sequence&
        dataQuality () const;

        dataQuality_sequence&
        dataQuality ();

        void
        dataQuality (const dataQuality_sequence& s);

        // Constructors.
        //
        t_road_lanes_laneSection_lcr_lane_roadMark_explicit ();

        t_road_lanes_laneSection_lcr_lane_roadMark_explicit (const ::xercesc::DOMElement& e,
                                                             ::xml_schema::flags f = 0,
                                                             ::xml_schema::container* c = 0);

        t_road_lanes_laneSection_lcr_lane_roadMark_explicit (const t_road_lanes_laneSection_lcr_lane_roadMark_explicit& x,
                                                             ::xml_schema::flags f = 0,
                                                             ::xml_schema::container* c = 0);

        virtual t_road_lanes_laneSection_lcr_lane_roadMark_explicit*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_lanes_laneSection_lcr_lane_roadMark_explicit&
        operator= (const t_road_lanes_laneSection_lcr_lane_roadMark_explicit& x);

        virtual 
        ~t_road_lanes_laneSection_lcr_lane_roadMark_explicit ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        line_sequence line_;
        include_sequence include_;
        userData_sequence userData_;
        dataQuality_sequence dataQuality_;
      };

      class t_road_lanes_laneSection_lcr_lane_roadMark_explicit_line: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // length
        //
        typedef ::xml_schema::string length_type;
        typedef ::xsd::cxx::tree::traits< length_type, char > length_traits;

        const length_type&
        length () const;

        length_type&
        length ();

        void
        length (const length_type& x);

        void
        length (::std::unique_ptr< length_type > p);

        // tOffset
        //
        typedef ::xml_schema::double_ tOffset_type;
        typedef ::xsd::cxx::tree::traits< tOffset_type, char, ::xsd::cxx::tree::schema_type::double_ > tOffset_traits;

        const tOffset_type&
        tOffset () const;

        tOffset_type&
        tOffset ();

        void
        tOffset (const tOffset_type& x);

        // sOffset
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero sOffset_type;
        typedef ::xsd::cxx::tree::traits< sOffset_type, char > sOffset_traits;

        const sOffset_type&
        sOffset () const;

        sOffset_type&
        sOffset ();

        void
        sOffset (const sOffset_type& x);

        void
        sOffset (::std::unique_ptr< sOffset_type > p);

        // rule
        //
        typedef ::simulation::standard::opendrive_schema::e_roadMarkRule rule_type;
        typedef ::xsd::cxx::tree::optional< rule_type > rule_optional;
        typedef ::xsd::cxx::tree::traits< rule_type, char > rule_traits;

        const rule_optional&
        rule () const;

        rule_optional&
        rule ();

        void
        rule (const rule_type& x);

        void
        rule (const rule_optional& x);

        void
        rule (::std::unique_ptr< rule_type > p);

        // width
        //
        typedef ::xml_schema::string width_type;
        typedef ::xsd::cxx::tree::optional< width_type > width_optional;
        typedef ::xsd::cxx::tree::traits< width_type, char > width_traits;

        const width_optional&
        width () const;

        width_optional&
        width ();

        void
        width (const width_type& x);

        void
        width (const width_optional& x);

        void
        width (::std::unique_ptr< width_type > p);

        // Constructors.
        //
        t_road_lanes_laneSection_lcr_lane_roadMark_explicit_line (const length_type&,
                                                                  const tOffset_type&,
                                                                  const sOffset_type&);

        t_road_lanes_laneSection_lcr_lane_roadMark_explicit_line (const ::xercesc::DOMElement& e,
                                                                  ::xml_schema::flags f = 0,
                                                                  ::xml_schema::container* c = 0);

        t_road_lanes_laneSection_lcr_lane_roadMark_explicit_line (const t_road_lanes_laneSection_lcr_lane_roadMark_explicit_line& x,
                                                                  ::xml_schema::flags f = 0,
                                                                  ::xml_schema::container* c = 0);

        virtual t_road_lanes_laneSection_lcr_lane_roadMark_explicit_line*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_lanes_laneSection_lcr_lane_roadMark_explicit_line&
        operator= (const t_road_lanes_laneSection_lcr_lane_roadMark_explicit_line& x);

        virtual 
        ~t_road_lanes_laneSection_lcr_lane_roadMark_explicit_line ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< length_type > length_;
        ::xsd::cxx::tree::one< tOffset_type > tOffset_;
        ::xsd::cxx::tree::one< sOffset_type > sOffset_;
        rule_optional rule_;
        width_optional width_;
      };

      class t_road_lanes_laneSection_lcr_lane_roadMark_sway: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // ds
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero ds_type;
        typedef ::xsd::cxx::tree::traits< ds_type, char > ds_traits;

        const ds_type&
        ds () const;

        ds_type&
        ds ();

        void
        ds (const ds_type& x);

        void
        ds (::std::unique_ptr< ds_type > p);

        // a
        //
        typedef ::xml_schema::double_ a_type;
        typedef ::xsd::cxx::tree::traits< a_type, char, ::xsd::cxx::tree::schema_type::double_ > a_traits;

        const a_type&
        a () const;

        a_type&
        a ();

        void
        a (const a_type& x);

        // b
        //
        typedef ::xml_schema::double_ b_type;
        typedef ::xsd::cxx::tree::traits< b_type, char, ::xsd::cxx::tree::schema_type::double_ > b_traits;

        const b_type&
        b () const;

        b_type&
        b ();

        void
        b (const b_type& x);

        // c
        //
        typedef ::xml_schema::double_ c_type;
        typedef ::xsd::cxx::tree::traits< c_type, char, ::xsd::cxx::tree::schema_type::double_ > c_traits;

        const c_type&
        c () const;

        c_type&
        c ();

        void
        c (const c_type& x);

        // d
        //
        typedef ::xml_schema::double_ d_type;
        typedef ::xsd::cxx::tree::traits< d_type, char, ::xsd::cxx::tree::schema_type::double_ > d_traits;

        const d_type&
        d () const;

        d_type&
        d ();

        void
        d (const d_type& x);

        // Constructors.
        //
        t_road_lanes_laneSection_lcr_lane_roadMark_sway (const ds_type&,
                                                         const a_type&,
                                                         const b_type&,
                                                         const c_type&,
                                                         const d_type&);

        t_road_lanes_laneSection_lcr_lane_roadMark_sway (const ::xercesc::DOMElement& e,
                                                         ::xml_schema::flags f = 0,
                                                         ::xml_schema::container* c = 0);

        t_road_lanes_laneSection_lcr_lane_roadMark_sway (const t_road_lanes_laneSection_lcr_lane_roadMark_sway& x,
                                                         ::xml_schema::flags f = 0,
                                                         ::xml_schema::container* c = 0);

        virtual t_road_lanes_laneSection_lcr_lane_roadMark_sway*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_lanes_laneSection_lcr_lane_roadMark_sway&
        operator= (const t_road_lanes_laneSection_lcr_lane_roadMark_sway& x);

        virtual 
        ~t_road_lanes_laneSection_lcr_lane_roadMark_sway ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< ds_type > ds_;
        ::xsd::cxx::tree::one< a_type > a_;
        ::xsd::cxx::tree::one< b_type > b_;
        ::xsd::cxx::tree::one< c_type > c_;
        ::xsd::cxx::tree::one< d_type > d_;
      };

      class t_road_lanes_laneSection_lcr_lane_roadMark_type: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // line
        //
        typedef ::simulation::standard::opendrive_schema::t_road_lanes_laneSection_lcr_lane_roadMark_type_line line_type;
        typedef ::xsd::cxx::tree::sequence< line_type > line_sequence;
        typedef line_sequence::iterator line_iterator;
        typedef line_sequence::const_iterator line_const_iterator;
        typedef ::xsd::cxx::tree::traits< line_type, char > line_traits;

        const line_sequence&
        line () const;

        line_sequence&
        line ();

        void
        line (const line_sequence& s);

        // include
        //
        typedef ::simulation::standard::opendrive_schema::t_include include_type;
        typedef ::xsd::cxx::tree::sequence< include_type > include_sequence;
        typedef include_sequence::iterator include_iterator;
        typedef include_sequence::const_iterator include_const_iterator;
        typedef ::xsd::cxx::tree::traits< include_type, char > include_traits;

        const include_sequence&
        include () const;

        include_sequence&
        include ();

        void
        include (const include_sequence& s);

        // userData
        //
        typedef ::simulation::standard::opendrive_schema::t_userData userData_type;
        typedef ::xsd::cxx::tree::sequence< userData_type > userData_sequence;
        typedef userData_sequence::iterator userData_iterator;
        typedef userData_sequence::const_iterator userData_const_iterator;
        typedef ::xsd::cxx::tree::traits< userData_type, char > userData_traits;

        const userData_sequence&
        userData () const;

        userData_sequence&
        userData ();

        void
        userData (const userData_sequence& s);

        // dataQuality
        //
        typedef ::simulation::standard::opendrive_schema::t_dataQuality dataQuality_type;
        typedef ::xsd::cxx::tree::sequence< dataQuality_type > dataQuality_sequence;
        typedef dataQuality_sequence::iterator dataQuality_iterator;
        typedef dataQuality_sequence::const_iterator dataQuality_const_iterator;
        typedef ::xsd::cxx::tree::traits< dataQuality_type, char > dataQuality_traits;

        const dataQuality_sequence&
        dataQuality () const;

        dataQuality_sequence&
        dataQuality ();

        void
        dataQuality (const dataQuality_sequence& s);

        // name
        //
        typedef ::xml_schema::string name_type;
        typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

        const name_type&
        name () const;

        name_type&
        name ();

        void
        name (const name_type& x);

        void
        name (::std::unique_ptr< name_type > p);

        // width
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero width_type;
        typedef ::xsd::cxx::tree::traits< width_type, char > width_traits;

        const width_type&
        width () const;

        width_type&
        width ();

        void
        width (const width_type& x);

        void
        width (::std::unique_ptr< width_type > p);

        // Constructors.
        //
        t_road_lanes_laneSection_lcr_lane_roadMark_type (const name_type&,
                                                         const width_type&);

        t_road_lanes_laneSection_lcr_lane_roadMark_type (const ::xercesc::DOMElement& e,
                                                         ::xml_schema::flags f = 0,
                                                         ::xml_schema::container* c = 0);

        t_road_lanes_laneSection_lcr_lane_roadMark_type (const t_road_lanes_laneSection_lcr_lane_roadMark_type& x,
                                                         ::xml_schema::flags f = 0,
                                                         ::xml_schema::container* c = 0);

        virtual t_road_lanes_laneSection_lcr_lane_roadMark_type*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_lanes_laneSection_lcr_lane_roadMark_type&
        operator= (const t_road_lanes_laneSection_lcr_lane_roadMark_type& x);

        virtual 
        ~t_road_lanes_laneSection_lcr_lane_roadMark_type ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        line_sequence line_;
        include_sequence include_;
        userData_sequence userData_;
        dataQuality_sequence dataQuality_;
        ::xsd::cxx::tree::one< name_type > name_;
        ::xsd::cxx::tree::one< width_type > width_;
      };

      class t_road_lanes_laneSection_lcr_lane_roadMark_type_line: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // length
        //
        typedef ::xml_schema::string length_type;
        typedef ::xsd::cxx::tree::traits< length_type, char > length_traits;

        const length_type&
        length () const;

        length_type&
        length ();

        void
        length (const length_type& x);

        void
        length (::std::unique_ptr< length_type > p);

        // space
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero space_type;
        typedef ::xsd::cxx::tree::traits< space_type, char > space_traits;

        const space_type&
        space () const;

        space_type&
        space ();

        void
        space (const space_type& x);

        void
        space (::std::unique_ptr< space_type > p);

        // tOffset
        //
        typedef ::xml_schema::double_ tOffset_type;
        typedef ::xsd::cxx::tree::traits< tOffset_type, char, ::xsd::cxx::tree::schema_type::double_ > tOffset_traits;

        const tOffset_type&
        tOffset () const;

        tOffset_type&
        tOffset ();

        void
        tOffset (const tOffset_type& x);

        // sOffset
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero sOffset_type;
        typedef ::xsd::cxx::tree::traits< sOffset_type, char > sOffset_traits;

        const sOffset_type&
        sOffset () const;

        sOffset_type&
        sOffset ();

        void
        sOffset (const sOffset_type& x);

        void
        sOffset (::std::unique_ptr< sOffset_type > p);

        // rule
        //
        typedef ::simulation::standard::opendrive_schema::e_roadMarkRule rule_type;
        typedef ::xsd::cxx::tree::optional< rule_type > rule_optional;
        typedef ::xsd::cxx::tree::traits< rule_type, char > rule_traits;

        const rule_optional&
        rule () const;

        rule_optional&
        rule ();

        void
        rule (const rule_type& x);

        void
        rule (const rule_optional& x);

        void
        rule (::std::unique_ptr< rule_type > p);

        // width
        //
        typedef ::xml_schema::string width_type;
        typedef ::xsd::cxx::tree::optional< width_type > width_optional;
        typedef ::xsd::cxx::tree::traits< width_type, char > width_traits;

        const width_optional&
        width () const;

        width_optional&
        width ();

        void
        width (const width_type& x);

        void
        width (const width_optional& x);

        void
        width (::std::unique_ptr< width_type > p);

        // color
        //
        typedef ::simulation::standard::opendrive_schema::e_roadMarkColor color_type;
        typedef ::xsd::cxx::tree::optional< color_type > color_optional;
        typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

        const color_optional&
        color () const;

        color_optional&
        color ();

        void
        color (const color_type& x);

        void
        color (const color_optional& x);

        void
        color (::std::unique_ptr< color_type > p);

        // Constructors.
        //
        t_road_lanes_laneSection_lcr_lane_roadMark_type_line (const length_type&,
                                                              const space_type&,
                                                              const tOffset_type&,
                                                              const sOffset_type&);

        t_road_lanes_laneSection_lcr_lane_roadMark_type_line (const ::xercesc::DOMElement& e,
                                                              ::xml_schema::flags f = 0,
                                                              ::xml_schema::container* c = 0);

        t_road_lanes_laneSection_lcr_lane_roadMark_type_line (const t_road_lanes_laneSection_lcr_lane_roadMark_type_line& x,
                                                              ::xml_schema::flags f = 0,
                                                              ::xml_schema::container* c = 0);

        virtual t_road_lanes_laneSection_lcr_lane_roadMark_type_line*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_lanes_laneSection_lcr_lane_roadMark_type_line&
        operator= (const t_road_lanes_laneSection_lcr_lane_roadMark_type_line& x);

        virtual 
        ~t_road_lanes_laneSection_lcr_lane_roadMark_type_line ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< length_type > length_;
        ::xsd::cxx::tree::one< space_type > space_;
        ::xsd::cxx::tree::one< tOffset_type > tOffset_;
        ::xsd::cxx::tree::one< sOffset_type > sOffset_;
        rule_optional rule_;
        width_optional width_;
        color_optional color_;
      };

      class t_road_lanes_laneSection_left: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // lane
        //
        typedef ::simulation::standard::opendrive_schema::t_road_lanes_laneSection_left_lane lane_type;
        typedef ::xsd::cxx::tree::sequence< lane_type > lane_sequence;
        typedef lane_sequence::iterator lane_iterator;
        typedef lane_sequence::const_iterator lane_const_iterator;
        typedef ::xsd::cxx::tree::traits< lane_type, char > lane_traits;

        const lane_sequence&
        lane () const;

        lane_sequence&
        lane ();

        void
        lane (const lane_sequence& s);

        // include
        //
        typedef ::simulation::standard::opendrive_schema::t_include include_type;
        typedef ::xsd::cxx::tree::sequence< include_type > include_sequence;
        typedef include_sequence::iterator include_iterator;
        typedef include_sequence::const_iterator include_const_iterator;
        typedef ::xsd::cxx::tree::traits< include_type, char > include_traits;

        const include_sequence&
        include () const;

        include_sequence&
        include ();

        void
        include (const include_sequence& s);

        // userData
        //
        typedef ::simulation::standard::opendrive_schema::t_userData userData_type;
        typedef ::xsd::cxx::tree::sequence< userData_type > userData_sequence;
        typedef userData_sequence::iterator userData_iterator;
        typedef userData_sequence::const_iterator userData_const_iterator;
        typedef ::xsd::cxx::tree::traits< userData_type, char > userData_traits;

        const userData_sequence&
        userData () const;

        userData_sequence&
        userData ();

        void
        userData (const userData_sequence& s);

        // dataQuality
        //
        typedef ::simulation::standard::opendrive_schema::t_dataQuality dataQuality_type;
        typedef ::xsd::cxx::tree::sequence< dataQuality_type > dataQuality_sequence;
        typedef dataQuality_sequence::iterator dataQuality_iterator;
        typedef dataQuality_sequence::const_iterator dataQuality_const_iterator;
        typedef ::xsd::cxx::tree::traits< dataQuality_type, char > dataQuality_traits;

        const dataQuality_sequence&
        dataQuality () const;

        dataQuality_sequence&
        dataQuality ();

        void
        dataQuality (const dataQuality_sequence& s);

        // Constructors.
        //
        t_road_lanes_laneSection_left ();

        t_road_lanes_laneSection_left (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

        t_road_lanes_laneSection_left (const t_road_lanes_laneSection_left& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

        virtual t_road_lanes_laneSection_left*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_lanes_laneSection_left&
        operator= (const t_road_lanes_laneSection_left& x);

        virtual 
        ~t_road_lanes_laneSection_left ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        lane_sequence lane_;
        include_sequence include_;
        userData_sequence userData_;
        dataQuality_sequence dataQuality_;
      };

      class t_road_lanes_laneSection_left_lane: public ::simulation::standard::opendrive_schema::t_road_lanes_laneSection_lr_lane
      {
        public:
        // id
        //
        typedef ::xml_schema::positive_integer id_type;
        typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

        const id_type&
        id () const;

        id_type&
        id ();

        void
        id (const id_type& x);

        // Constructors.
        //
        t_road_lanes_laneSection_left_lane (const type_type&,
                                            const id_type&);

        t_road_lanes_laneSection_left_lane (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

        t_road_lanes_laneSection_left_lane (const t_road_lanes_laneSection_left_lane& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

        virtual t_road_lanes_laneSection_left_lane*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_lanes_laneSection_left_lane&
        operator= (const t_road_lanes_laneSection_left_lane& x);

        virtual 
        ~t_road_lanes_laneSection_left_lane ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< id_type > id_;
      };

      class t_road_lanes_laneSection_lr_lane_access: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // sOffset
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero sOffset_type;
        typedef ::xsd::cxx::tree::traits< sOffset_type, char > sOffset_traits;

        const sOffset_type&
        sOffset () const;

        sOffset_type&
        sOffset ();

        void
        sOffset (const sOffset_type& x);

        void
        sOffset (::std::unique_ptr< sOffset_type > p);

        // rule
        //
        typedef ::simulation::standard::opendrive_schema::e_road_lanes_laneSection_lr_lane_access_rule rule_type;
        typedef ::xsd::cxx::tree::optional< rule_type > rule_optional;
        typedef ::xsd::cxx::tree::traits< rule_type, char > rule_traits;

        const rule_optional&
        rule () const;

        rule_optional&
        rule ();

        void
        rule (const rule_type& x);

        void
        rule (const rule_optional& x);

        void
        rule (::std::unique_ptr< rule_type > p);

        // restriction
        //
        typedef ::simulation::standard::opendrive_schema::e_accessRestrictionType restriction_type;
        typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

        const restriction_type&
        restriction () const;

        restriction_type&
        restriction ();

        void
        restriction (const restriction_type& x);

        void
        restriction (::std::unique_ptr< restriction_type > p);

        // Constructors.
        //
        t_road_lanes_laneSection_lr_lane_access (const sOffset_type&,
                                                 const restriction_type&);

        t_road_lanes_laneSection_lr_lane_access (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

        t_road_lanes_laneSection_lr_lane_access (const t_road_lanes_laneSection_lr_lane_access& x,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

        virtual t_road_lanes_laneSection_lr_lane_access*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_lanes_laneSection_lr_lane_access&
        operator= (const t_road_lanes_laneSection_lr_lane_access& x);

        virtual 
        ~t_road_lanes_laneSection_lr_lane_access ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< sOffset_type > sOffset_;
        rule_optional rule_;
        ::xsd::cxx::tree::one< restriction_type > restriction_;
      };

      class t_road_lanes_laneSection_lr_lane_border: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // sOffset
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero sOffset_type;
        typedef ::xsd::cxx::tree::traits< sOffset_type, char > sOffset_traits;

        const sOffset_type&
        sOffset () const;

        sOffset_type&
        sOffset ();

        void
        sOffset (const sOffset_type& x);

        void
        sOffset (::std::unique_ptr< sOffset_type > p);

        // a
        //
        typedef ::xml_schema::double_ a_type;
        typedef ::xsd::cxx::tree::traits< a_type, char, ::xsd::cxx::tree::schema_type::double_ > a_traits;

        const a_type&
        a () const;

        a_type&
        a ();

        void
        a (const a_type& x);

        // b
        //
        typedef ::xml_schema::double_ b_type;
        typedef ::xsd::cxx::tree::traits< b_type, char, ::xsd::cxx::tree::schema_type::double_ > b_traits;

        const b_type&
        b () const;

        b_type&
        b ();

        void
        b (const b_type& x);

        // c
        //
        typedef ::xml_schema::double_ c_type;
        typedef ::xsd::cxx::tree::traits< c_type, char, ::xsd::cxx::tree::schema_type::double_ > c_traits;

        const c_type&
        c () const;

        c_type&
        c ();

        void
        c (const c_type& x);

        // d
        //
        typedef ::xml_schema::double_ d_type;
        typedef ::xsd::cxx::tree::traits< d_type, char, ::xsd::cxx::tree::schema_type::double_ > d_traits;

        const d_type&
        d () const;

        d_type&
        d ();

        void
        d (const d_type& x);

        // Constructors.
        //
        t_road_lanes_laneSection_lr_lane_border (const sOffset_type&,
                                                 const a_type&,
                                                 const b_type&,
                                                 const c_type&,
                                                 const d_type&);

        t_road_lanes_laneSection_lr_lane_border (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

        t_road_lanes_laneSection_lr_lane_border (const t_road_lanes_laneSection_lr_lane_border& x,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

        virtual t_road_lanes_laneSection_lr_lane_border*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_lanes_laneSection_lr_lane_border&
        operator= (const t_road_lanes_laneSection_lr_lane_border& x);

        virtual 
        ~t_road_lanes_laneSection_lr_lane_border ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< sOffset_type > sOffset_;
        ::xsd::cxx::tree::one< a_type > a_;
        ::xsd::cxx::tree::one< b_type > b_;
        ::xsd::cxx::tree::one< c_type > c_;
        ::xsd::cxx::tree::one< d_type > d_;
      };

      class t_road_lanes_laneSection_lr_lane_height: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // sOffset
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero sOffset_type;
        typedef ::xsd::cxx::tree::traits< sOffset_type, char > sOffset_traits;

        const sOffset_type&
        sOffset () const;

        sOffset_type&
        sOffset ();

        void
        sOffset (const sOffset_type& x);

        void
        sOffset (::std::unique_ptr< sOffset_type > p);

        // inner
        //
        typedef ::xml_schema::double_ inner_type;
        typedef ::xsd::cxx::tree::traits< inner_type, char, ::xsd::cxx::tree::schema_type::double_ > inner_traits;

        const inner_type&
        inner () const;

        inner_type&
        inner ();

        void
        inner (const inner_type& x);

        // outer
        //
        typedef ::xml_schema::double_ outer_type;
        typedef ::xsd::cxx::tree::traits< outer_type, char, ::xsd::cxx::tree::schema_type::double_ > outer_traits;

        const outer_type&
        outer () const;

        outer_type&
        outer ();

        void
        outer (const outer_type& x);

        // Constructors.
        //
        t_road_lanes_laneSection_lr_lane_height (const sOffset_type&,
                                                 const inner_type&,
                                                 const outer_type&);

        t_road_lanes_laneSection_lr_lane_height (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

        t_road_lanes_laneSection_lr_lane_height (const t_road_lanes_laneSection_lr_lane_height& x,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

        virtual t_road_lanes_laneSection_lr_lane_height*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_lanes_laneSection_lr_lane_height&
        operator= (const t_road_lanes_laneSection_lr_lane_height& x);

        virtual 
        ~t_road_lanes_laneSection_lr_lane_height ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< sOffset_type > sOffset_;
        ::xsd::cxx::tree::one< inner_type > inner_;
        ::xsd::cxx::tree::one< outer_type > outer_;
      };

      class t_road_lanes_laneSection_lr_lane_material: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // sOffset
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero sOffset_type;
        typedef ::xsd::cxx::tree::traits< sOffset_type, char > sOffset_traits;

        const sOffset_type&
        sOffset () const;

        sOffset_type&
        sOffset ();

        void
        sOffset (const sOffset_type& x);

        void
        sOffset (::std::unique_ptr< sOffset_type > p);

        // surface
        //
        typedef ::xml_schema::string surface_type;
        typedef ::xsd::cxx::tree::optional< surface_type > surface_optional;
        typedef ::xsd::cxx::tree::traits< surface_type, char > surface_traits;

        const surface_optional&
        surface () const;

        surface_optional&
        surface ();

        void
        surface (const surface_type& x);

        void
        surface (const surface_optional& x);

        void
        surface (::std::unique_ptr< surface_type > p);

        // friction
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero friction_type;
        typedef ::xsd::cxx::tree::traits< friction_type, char > friction_traits;

        const friction_type&
        friction () const;

        friction_type&
        friction ();

        void
        friction (const friction_type& x);

        void
        friction (::std::unique_ptr< friction_type > p);

        // roughness
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero roughness_type;
        typedef ::xsd::cxx::tree::optional< roughness_type > roughness_optional;
        typedef ::xsd::cxx::tree::traits< roughness_type, char > roughness_traits;

        const roughness_optional&
        roughness () const;

        roughness_optional&
        roughness ();

        void
        roughness (const roughness_type& x);

        void
        roughness (const roughness_optional& x);

        void
        roughness (::std::unique_ptr< roughness_type > p);

        // Constructors.
        //
        t_road_lanes_laneSection_lr_lane_material (const sOffset_type&,
                                                   const friction_type&);

        t_road_lanes_laneSection_lr_lane_material (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

        t_road_lanes_laneSection_lr_lane_material (const t_road_lanes_laneSection_lr_lane_material& x,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

        virtual t_road_lanes_laneSection_lr_lane_material*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_lanes_laneSection_lr_lane_material&
        operator= (const t_road_lanes_laneSection_lr_lane_material& x);

        virtual 
        ~t_road_lanes_laneSection_lr_lane_material ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< sOffset_type > sOffset_;
        surface_optional surface_;
        ::xsd::cxx::tree::one< friction_type > friction_;
        roughness_optional roughness_;
      };

      class t_road_lanes_laneSection_lr_lane_rule: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // sOffset
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero sOffset_type;
        typedef ::xsd::cxx::tree::traits< sOffset_type, char > sOffset_traits;

        const sOffset_type&
        sOffset () const;

        sOffset_type&
        sOffset ();

        void
        sOffset (const sOffset_type& x);

        void
        sOffset (::std::unique_ptr< sOffset_type > p);

        // value
        //
        typedef ::xml_schema::string value_type;
        typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

        const value_type&
        value () const;

        value_type&
        value ();

        void
        value (const value_type& x);

        void
        value (::std::unique_ptr< value_type > p);

        // Constructors.
        //
        t_road_lanes_laneSection_lr_lane_rule (const sOffset_type&,
                                               const value_type&);

        t_road_lanes_laneSection_lr_lane_rule (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

        t_road_lanes_laneSection_lr_lane_rule (const t_road_lanes_laneSection_lr_lane_rule& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

        virtual t_road_lanes_laneSection_lr_lane_rule*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_lanes_laneSection_lr_lane_rule&
        operator= (const t_road_lanes_laneSection_lr_lane_rule& x);

        virtual 
        ~t_road_lanes_laneSection_lr_lane_rule ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< sOffset_type > sOffset_;
        ::xsd::cxx::tree::one< value_type > value_;
      };

      class t_road_lanes_laneSection_lr_lane_speed: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // sOffset
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero sOffset_type;
        typedef ::xsd::cxx::tree::traits< sOffset_type, char > sOffset_traits;

        const sOffset_type&
        sOffset () const;

        sOffset_type&
        sOffset ();

        void
        sOffset (const sOffset_type& x);

        void
        sOffset (::std::unique_ptr< sOffset_type > p);

        // max
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero max_type;
        typedef ::xsd::cxx::tree::traits< max_type, char > max_traits;

        const max_type&
        max () const;

        max_type&
        max ();

        void
        max (const max_type& x);

        void
        max (::std::unique_ptr< max_type > p);

        // unit
        //
        typedef ::simulation::standard::opendrive_schema::e_unitSpeed unit_type;
        typedef ::xsd::cxx::tree::optional< unit_type > unit_optional;
        typedef ::xsd::cxx::tree::traits< unit_type, char > unit_traits;

        const unit_optional&
        unit () const;

        unit_optional&
        unit ();

        void
        unit (const unit_type& x);

        void
        unit (const unit_optional& x);

        void
        unit (::std::unique_ptr< unit_type > p);

        // Constructors.
        //
        t_road_lanes_laneSection_lr_lane_speed (const sOffset_type&,
                                                const max_type&);

        t_road_lanes_laneSection_lr_lane_speed (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

        t_road_lanes_laneSection_lr_lane_speed (const t_road_lanes_laneSection_lr_lane_speed& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

        virtual t_road_lanes_laneSection_lr_lane_speed*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_lanes_laneSection_lr_lane_speed&
        operator= (const t_road_lanes_laneSection_lr_lane_speed& x);

        virtual 
        ~t_road_lanes_laneSection_lr_lane_speed ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< sOffset_type > sOffset_;
        ::xsd::cxx::tree::one< max_type > max_;
        unit_optional unit_;
      };

      class t_road_lanes_laneSection_lr_lane_width: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // sOffset
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero sOffset_type;
        typedef ::xsd::cxx::tree::traits< sOffset_type, char > sOffset_traits;

        const sOffset_type&
        sOffset () const;

        sOffset_type&
        sOffset ();

        void
        sOffset (const sOffset_type& x);

        void
        sOffset (::std::unique_ptr< sOffset_type > p);

        // a
        //
        typedef ::xml_schema::double_ a_type;
        typedef ::xsd::cxx::tree::traits< a_type, char, ::xsd::cxx::tree::schema_type::double_ > a_traits;

        const a_type&
        a () const;

        a_type&
        a ();

        void
        a (const a_type& x);

        // b
        //
        typedef ::xml_schema::double_ b_type;
        typedef ::xsd::cxx::tree::traits< b_type, char, ::xsd::cxx::tree::schema_type::double_ > b_traits;

        const b_type&
        b () const;

        b_type&
        b ();

        void
        b (const b_type& x);

        // c
        //
        typedef ::xml_schema::double_ c_type;
        typedef ::xsd::cxx::tree::traits< c_type, char, ::xsd::cxx::tree::schema_type::double_ > c_traits;

        const c_type&
        c () const;

        c_type&
        c ();

        void
        c (const c_type& x);

        // d
        //
        typedef ::xml_schema::double_ d_type;
        typedef ::xsd::cxx::tree::traits< d_type, char, ::xsd::cxx::tree::schema_type::double_ > d_traits;

        const d_type&
        d () const;

        d_type&
        d ();

        void
        d (const d_type& x);

        // Constructors.
        //
        t_road_lanes_laneSection_lr_lane_width (const sOffset_type&,
                                                const a_type&,
                                                const b_type&,
                                                const c_type&,
                                                const d_type&);

        t_road_lanes_laneSection_lr_lane_width (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

        t_road_lanes_laneSection_lr_lane_width (const t_road_lanes_laneSection_lr_lane_width& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

        virtual t_road_lanes_laneSection_lr_lane_width*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_lanes_laneSection_lr_lane_width&
        operator= (const t_road_lanes_laneSection_lr_lane_width& x);

        virtual 
        ~t_road_lanes_laneSection_lr_lane_width ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< sOffset_type > sOffset_;
        ::xsd::cxx::tree::one< a_type > a_;
        ::xsd::cxx::tree::one< b_type > b_;
        ::xsd::cxx::tree::one< c_type > c_;
        ::xsd::cxx::tree::one< d_type > d_;
      };

      class t_road_lanes_laneSection_right: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // lane
        //
        typedef ::simulation::standard::opendrive_schema::t_road_lanes_laneSection_right_lane lane_type;
        typedef ::xsd::cxx::tree::sequence< lane_type > lane_sequence;
        typedef lane_sequence::iterator lane_iterator;
        typedef lane_sequence::const_iterator lane_const_iterator;
        typedef ::xsd::cxx::tree::traits< lane_type, char > lane_traits;

        const lane_sequence&
        lane () const;

        lane_sequence&
        lane ();

        void
        lane (const lane_sequence& s);

        // include
        //
        typedef ::simulation::standard::opendrive_schema::t_include include_type;
        typedef ::xsd::cxx::tree::sequence< include_type > include_sequence;
        typedef include_sequence::iterator include_iterator;
        typedef include_sequence::const_iterator include_const_iterator;
        typedef ::xsd::cxx::tree::traits< include_type, char > include_traits;

        const include_sequence&
        include () const;

        include_sequence&
        include ();

        void
        include (const include_sequence& s);

        // userData
        //
        typedef ::simulation::standard::opendrive_schema::t_userData userData_type;
        typedef ::xsd::cxx::tree::sequence< userData_type > userData_sequence;
        typedef userData_sequence::iterator userData_iterator;
        typedef userData_sequence::const_iterator userData_const_iterator;
        typedef ::xsd::cxx::tree::traits< userData_type, char > userData_traits;

        const userData_sequence&
        userData () const;

        userData_sequence&
        userData ();

        void
        userData (const userData_sequence& s);

        // dataQuality
        //
        typedef ::simulation::standard::opendrive_schema::t_dataQuality dataQuality_type;
        typedef ::xsd::cxx::tree::sequence< dataQuality_type > dataQuality_sequence;
        typedef dataQuality_sequence::iterator dataQuality_iterator;
        typedef dataQuality_sequence::const_iterator dataQuality_const_iterator;
        typedef ::xsd::cxx::tree::traits< dataQuality_type, char > dataQuality_traits;

        const dataQuality_sequence&
        dataQuality () const;

        dataQuality_sequence&
        dataQuality ();

        void
        dataQuality (const dataQuality_sequence& s);

        // Constructors.
        //
        t_road_lanes_laneSection_right ();

        t_road_lanes_laneSection_right (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

        t_road_lanes_laneSection_right (const t_road_lanes_laneSection_right& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

        virtual t_road_lanes_laneSection_right*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_lanes_laneSection_right&
        operator= (const t_road_lanes_laneSection_right& x);

        virtual 
        ~t_road_lanes_laneSection_right ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        lane_sequence lane_;
        include_sequence include_;
        userData_sequence userData_;
        dataQuality_sequence dataQuality_;
      };

      class t_road_lanes_laneSection_right_lane: public ::simulation::standard::opendrive_schema::t_road_lanes_laneSection_lr_lane
      {
        public:
        // id
        //
        typedef ::xml_schema::negative_integer id_type;
        typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

        const id_type&
        id () const;

        id_type&
        id ();

        void
        id (const id_type& x);

        // Constructors.
        //
        t_road_lanes_laneSection_right_lane (const type_type&,
                                             const id_type&);

        t_road_lanes_laneSection_right_lane (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

        t_road_lanes_laneSection_right_lane (const t_road_lanes_laneSection_right_lane& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

        virtual t_road_lanes_laneSection_right_lane*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_lanes_laneSection_right_lane&
        operator= (const t_road_lanes_laneSection_right_lane& x);

        virtual 
        ~t_road_lanes_laneSection_right_lane ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< id_type > id_;
      };

      class t_road_objects_object_laneValidity: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // fromLane
        //
        typedef ::xml_schema::integer fromLane_type;
        typedef ::xsd::cxx::tree::traits< fromLane_type, char > fromLane_traits;

        const fromLane_type&
        fromLane () const;

        fromLane_type&
        fromLane ();

        void
        fromLane (const fromLane_type& x);

        // toLane
        //
        typedef ::xml_schema::integer toLane_type;
        typedef ::xsd::cxx::tree::traits< toLane_type, char > toLane_traits;

        const toLane_type&
        toLane () const;

        toLane_type&
        toLane ();

        void
        toLane (const toLane_type& x);

        // Constructors.
        //
        t_road_objects_object_laneValidity (const fromLane_type&,
                                            const toLane_type&);

        t_road_objects_object_laneValidity (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

        t_road_objects_object_laneValidity (const t_road_objects_object_laneValidity& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

        virtual t_road_objects_object_laneValidity*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_objects_object_laneValidity&
        operator= (const t_road_objects_object_laneValidity& x);

        virtual 
        ~t_road_objects_object_laneValidity ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< fromLane_type > fromLane_;
        ::xsd::cxx::tree::one< toLane_type > toLane_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace simulation
{
  namespace standard
  {
    namespace opendrive_schema
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // DELIVERABLE_XSD_SCHEMA_OPENDRIVE_16_LANE_HXX

// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef DELIVERABLE_XSD_SCHEMA_OPENDRIVE_16_SIGNAL_HXX
#define DELIVERABLE_XSD_SCHEMA_OPENDRIVE_16_SIGNAL_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace simulation
{
  namespace standard
  {
    namespace opendrive_schema
    {
      class e_road_signals_signal_reference_elementType;
      class t_controller;
      class t_controller_control;
      class t_road_signals;
      class t_road_signals_signal;
      class t_road_signals_signal_dependency;
      class t_road_signals_signal_positionInertial;
      class t_road_signals_signal_positionRoad;
      class t_road_signals_signal_reference;
      class t_road_signals_signalReference;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "opendrive_16_road.hxx"

#include "opendrive_16_object.hxx"

#include "opendrive_16_core.hxx"

#include "opendrive_16_lane.hxx"

namespace simulation
{
  namespace standard
  {
    namespace opendrive_schema
    {
      class e_road_signals_signal_reference_elementType: public ::xml_schema::string
      {
        public:
        enum value
        {
          object,
          signals_signal
        };

        e_road_signals_signal_reference_elementType (value v);

        e_road_signals_signal_reference_elementType (const char* v);

        e_road_signals_signal_reference_elementType (const ::std::string& v);

        e_road_signals_signal_reference_elementType (const ::xml_schema::string& v);

        e_road_signals_signal_reference_elementType (const ::xercesc::DOMElement& e,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

        e_road_signals_signal_reference_elementType (const ::xercesc::DOMAttr& a,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

        e_road_signals_signal_reference_elementType (const ::std::string& s,
                                                     const ::xercesc::DOMElement* e,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

        e_road_signals_signal_reference_elementType (const e_road_signals_signal_reference_elementType& x,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

        virtual e_road_signals_signal_reference_elementType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        e_road_signals_signal_reference_elementType&
        operator= (value v);

        virtual
        operator value () const
        {
          return _xsd_e_road_signals_signal_reference_elementType_convert ();
        }

        protected:
        value
        _xsd_e_road_signals_signal_reference_elementType_convert () const;

        public:
        static const char* const _xsd_e_road_signals_signal_reference_elementType_literals_[2];
        static const value _xsd_e_road_signals_signal_reference_elementType_indexes_[2];
      };

      class t_controller: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // control
        //
        typedef ::simulation::standard::opendrive_schema::t_controller_control control_type;
        typedef ::xsd::cxx::tree::sequence< control_type > control_sequence;
        typedef control_sequence::iterator control_iterator;
        typedef control_sequence::const_iterator control_const_iterator;
        typedef ::xsd::cxx::tree::traits< control_type, char > control_traits;

        const control_sequence&
        control () const;

        control_sequence&
        control ();

        void
        control (const control_sequence& s);

        // include
        //
        typedef ::simulation::standard::opendrive_schema::t_include include_type;
        typedef ::xsd::cxx::tree::sequence< include_type > include_sequence;
        typedef include_sequence::iterator include_iterator;
        typedef include_sequence::const_iterator include_const_iterator;
        typedef ::xsd::cxx::tree::traits< include_type, char > include_traits;

        const include_sequence&
        include () const;

        include_sequence&
        include ();

        void
        include (const include_sequence& s);

        // userData
        //
        typedef ::simulation::standard::opendrive_schema::t_userData userData_type;
        typedef ::xsd::cxx::tree::sequence< userData_type > userData_sequence;
        typedef userData_sequence::iterator userData_iterator;
        typedef userData_sequence::const_iterator userData_const_iterator;
        typedef ::xsd::cxx::tree::traits< userData_type, char > userData_traits;

        const userData_sequence&
        userData () const;

        userData_sequence&
        userData ();

        void
        userData (const userData_sequence& s);

        // dataQuality
        //
        typedef ::simulation::standard::opendrive_schema::t_dataQuality dataQuality_type;
        typedef ::xsd::cxx::tree::sequence< dataQuality_type > dataQuality_sequence;
        typedef dataQuality_sequence::iterator dataQuality_iterator;
        typedef dataQuality_sequence::const_iterator dataQuality_const_iterator;
        typedef ::xsd::cxx::tree::traits< dataQuality_type, char > dataQuality_traits;

        const dataQuality_sequence&
        dataQuality () const;

        dataQuality_sequence&
        dataQuality ();

        void
        dataQuality (const dataQuality_sequence& s);

        // id
        //
        typedef ::xml_schema::string id_type;
        typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

        const id_type&
        id () const;

        id_type&
        id ();

        void
        id (const id_type& x);

        void
        id (::std::unique_ptr< id_type > p);

        // name
        //
        typedef ::xml_schema::string name_type;
        typedef ::xsd::cxx::tree::optional< name_type > name_optional;
        typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

        const name_optional&
        name () const;

        name_optional&
        name ();

        void
        name (const name_type& x);

        void
        name (const name_optional& x);

        void
        name (::std::unique_ptr< name_type > p);

        // sequence
        //
        typedef ::xml_schema::non_negative_integer sequence_type;
        typedef ::xsd::cxx::tree::optional< sequence_type > sequence_optional;
        typedef ::xsd::cxx::tree::traits< sequence_type, char > sequence_traits;

        const sequence_optional&
        sequence () const;

        sequence_optional&
        sequence ();

        void
        sequence (const sequence_type& x);

        void
        sequence (const sequence_optional& x);

        // Constructors.
        //
        t_controller (const id_type&);

        t_controller (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        t_controller (const t_controller& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        virtual t_controller*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_controller&
        operator= (const t_controller& x);

        virtual 
        ~t_controller ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        control_sequence control_;
        include_sequence include_;
        userData_sequence userData_;
        dataQuality_sequence dataQuality_;
        ::xsd::cxx::tree::one< id_type > id_;
        name_optional name_;
        sequence_optional sequence_;
      };

      class t_controller_control: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // signalId
        //
        typedef ::xml_schema::string signalId_type;
        typedef ::xsd::cxx::tree::traits< signalId_type, char > signalId_traits;

        const signalId_type&
        signalId () const;

        signalId_type&
        signalId ();

        void
        signalId (const signalId_type& x);

        void
        signalId (::std::unique_ptr< signalId_type > p);

        // type
        //
        typedef ::xml_schema::string type_type;
        typedef ::xsd::cxx::tree::optional< type_type > type_optional;
        typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

        const type_optional&
        type () const;

        type_optional&
        type ();

        void
        type (const type_type& x);

        void
        type (const type_optional& x);

        void
        type (::std::unique_ptr< type_type > p);

        // Constructors.
        //
        t_controller_control (const signalId_type&);

        t_controller_control (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

        t_controller_control (const t_controller_control& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

        virtual t_controller_control*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_controller_control&
        operator= (const t_controller_control& x);

        virtual 
        ~t_controller_control ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< signalId_type > signalId_;
        type_optional type_;
      };

      class t_road_signals: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // signal
        //
        typedef ::simulation::standard::opendrive_schema::t_road_signals_signal signal_type;
        typedef ::xsd::cxx::tree::sequence< signal_type > signal_sequence;
        typedef signal_sequence::iterator signal_iterator;
        typedef signal_sequence::const_iterator signal_const_iterator;
        typedef ::xsd::cxx::tree::traits< signal_type, char > signal_traits;

        const signal_sequence&
        signals_signal () const;

        signal_sequence&
        signals_signal ();

        void
        signals_signal (const signal_sequence& s);

        // signalReference
        //
        typedef ::simulation::standard::opendrive_schema::t_road_signals_signalReference signalReference_type;
        typedef ::xsd::cxx::tree::sequence< signalReference_type > signalReference_sequence;
        typedef signalReference_sequence::iterator signalReference_iterator;
        typedef signalReference_sequence::const_iterator signalReference_const_iterator;
        typedef ::xsd::cxx::tree::traits< signalReference_type, char > signalReference_traits;

        const signalReference_sequence&
        signalReference () const;

        signalReference_sequence&
        signalReference ();

        void
        signalReference (const signalReference_sequence& s);

        // include
        //
        typedef ::simulation::standard::opendrive_schema::t_include include_type;
        typedef ::xsd::cxx::tree::sequence< include_type > include_sequence;
        typedef include_sequence::iterator include_iterator;
        typedef include_sequence::const_iterator include_const_iterator;
        typedef ::xsd::cxx::tree::traits< include_type, char > include_traits;

        const include_sequence&
        include () const;

        include_sequence&
        include ();

        void
        include (const include_sequence& s);

        // userData
        //
        typedef ::simulation::standard::opendrive_schema::t_userData userData_type;
        typedef ::xsd::cxx::tree::sequence< userData_type > userData_sequence;
        typedef userData_sequence::iterator userData_iterator;
        typedef userData_sequence::const_iterator userData_const_iterator;
        typedef ::xsd::cxx::tree::traits< userData_type, char > userData_traits;

        const userData_sequence&
        userData () const;

        userData_sequence&
        userData ();

        void
        userData (const userData_sequence& s);

        // dataQuality
        //
        typedef ::simulation::standard::opendrive_schema::t_dataQuality dataQuality_type;
        typedef ::xsd::cxx::tree::sequence< dataQuality_type > dataQuality_sequence;
        typedef dataQuality_sequence::iterator dataQuality_iterator;
        typedef dataQuality_sequence::const_iterator dataQuality_const_iterator;
        typedef ::xsd::cxx::tree::traits< dataQuality_type, char > dataQuality_traits;

        const dataQuality_sequence&
        dataQuality () const;

        dataQuality_sequence&
        dataQuality ();

        void
        dataQuality (const dataQuality_sequence& s);

        // Constructors.
        //
        t_road_signals ();

        t_road_signals (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        t_road_signals (const t_road_signals& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        virtual t_road_signals*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_signals&
        operator= (const t_road_signals& x);

        virtual 
        ~t_road_signals ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        signal_sequence signals_signal_;
        signalReference_sequence signalReference_;
        include_sequence include_;
        userData_sequence userData_;
        dataQuality_sequence dataQuality_;
      };

      class t_road_signals_signal: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // validity
        //
        typedef ::simulation::standard::opendrive_schema::t_road_objects_object_laneValidity validity_type;
        typedef ::xsd::cxx::tree::sequence< validity_type > validity_sequence;
        typedef validity_sequence::iterator validity_iterator;
        typedef validity_sequence::const_iterator validity_const_iterator;
        typedef ::xsd::cxx::tree::traits< validity_type, char > validity_traits;

        const validity_sequence&
        validity () const;

        validity_sequence&
        validity ();

        void
        validity (const validity_sequence& s);

        // dependency
        //
        typedef ::simulation::standard::opendrive_schema::t_road_signals_signal_dependency dependency_type;
        typedef ::xsd::cxx::tree::sequence< dependency_type > dependency_sequence;
        typedef dependency_sequence::iterator dependency_iterator;
        typedef dependency_sequence::const_iterator dependency_const_iterator;
        typedef ::xsd::cxx::tree::traits< dependency_type, char > dependency_traits;

        const dependency_sequence&
        dependency () const;

        dependency_sequence&
        dependency ();

        void
        dependency (const dependency_sequence& s);

        // reference
        //
        typedef ::simulation::standard::opendrive_schema::t_road_signals_signal_reference reference_type;
        typedef ::xsd::cxx::tree::sequence< reference_type > reference_sequence;
        typedef reference_sequence::iterator reference_iterator;
        typedef reference_sequence::const_iterator reference_const_iterator;
        typedef ::xsd::cxx::tree::traits< reference_type, char > reference_traits;

        const reference_sequence&
        reference () const;

        reference_sequence&
        reference ();

        void
        reference (const reference_sequence& s);

        // positionRoad
        //
        typedef ::simulation::standard::opendrive_schema::t_road_signals_signal_positionRoad positionRoad_type;
        typedef ::xsd::cxx::tree::optional< positionRoad_type > positionRoad_optional;
        typedef ::xsd::cxx::tree::traits< positionRoad_type, char > positionRoad_traits;

        const positionRoad_optional&
        positionRoad () const;

        positionRoad_optional&
        positionRoad ();

        void
        positionRoad (const positionRoad_type& x);

        void
        positionRoad (const positionRoad_optional& x);

        void
        positionRoad (::std::unique_ptr< positionRoad_type > p);

        // positionInertial
        //
        typedef ::simulation::standard::opendrive_schema::t_road_signals_signal_positionInertial positionInertial_type;
        typedef ::xsd::cxx::tree::optional< positionInertial_type > positionInertial_optional;
        typedef ::xsd::cxx::tree::traits< positionInertial_type, char > positionInertial_traits;

        const positionInertial_optional&
        positionInertial () const;

        positionInertial_optional&
        positionInertial ();

        void
        positionInertial (const positionInertial_type& x);

        void
        positionInertial (const positionInertial_optional& x);

        void
        positionInertial (::std::unique_ptr< positionInertial_type > p);

        // include
        //
        typedef ::simulation::standard::opendrive_schema::t_include include_type;
        typedef ::xsd::cxx::tree::sequence< include_type > include_sequence;
        typedef include_sequence::iterator include_iterator;
        typedef include_sequence::const_iterator include_const_iterator;
        typedef ::xsd::cxx::tree::traits< include_type, char > include_traits;

        const include_sequence&
        include () const;

        include_sequence&
        include ();

        void
        include (const include_sequence& s);

        // userData
        //
        typedef ::simulation::standard::opendrive_schema::t_userData userData_type;
        typedef ::xsd::cxx::tree::sequence< userData_type > userData_sequence;
        typedef userData_sequence::iterator userData_iterator;
        typedef userData_sequence::const_iterator userData_const_iterator;
        typedef ::xsd::cxx::tree::traits< userData_type, char > userData_traits;

        const userData_sequence&
        userData () const;

        userData_sequence&
        userData ();

        void
        userData (const userData_sequence& s);

        // dataQuality
        //
        typedef ::simulation::standard::opendrive_schema::t_dataQuality dataQuality_type;
        typedef ::xsd::cxx::tree::sequence< dataQuality_type > dataQuality_sequence;
        typedef dataQuality_sequence::iterator dataQuality_iterator;
        typedef dataQuality_sequence::const_iterator dataQuality_const_iterator;
        typedef ::xsd::cxx::tree::traits< dataQuality_type, char > dataQuality_traits;

        const dataQuality_sequence&
        dataQuality () const;

        dataQuality_sequence&
        dataQuality ();

        void
        dataQuality (const dataQuality_sequence& s);

        // s
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero s_type;
        typedef ::xsd::cxx::tree::traits< s_type, char > s_traits;

        const s_type&
        s () const;

        s_type&
        s ();

        void
        s (const s_type& x);

        void
        s (::std::unique_ptr< s_type > p);

        // t
        //
        typedef ::xml_schema::double_ t_type;
        typedef ::xsd::cxx::tree::traits< t_type, char, ::xsd::cxx::tree::schema_type::double_ > t_traits;

        const t_type&
        t () const;

        t_type&
        t ();

        void
        t (const t_type& x);

        // id
        //
        typedef ::xml_schema::string id_type;
        typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

        const id_type&
        id () const;

        id_type&
        id ();

        void
        id (const id_type& x);

        void
        id (::std::unique_ptr< id_type > p);

        // name
        //
        typedef ::xml_schema::string name_type;
        typedef ::xsd::cxx::tree::optional< name_type > name_optional;
        typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

        const name_optional&
        name () const;

        name_optional&
        name ();

        void
        name (const name_type& x);

        void
        name (const name_optional& x);

        void
        name (::std::unique_ptr< name_type > p);

        // dynamic
        //
        typedef ::simulation::standard::opendrive_schema::t_yesNo dynamic_type;
        typedef ::xsd::cxx::tree::traits< dynamic_type, char > dynamic_traits;

        const dynamic_type&
        dynamic () const;

        dynamic_type&
        dynamic ();

        void
        dynamic (const dynamic_type& x);

        void
        dynamic (::std::unique_ptr< dynamic_type > p);

        // orientation
        //
        typedef ::simulation::standard::opendrive_schema::e_orientation orientation_type;
        typedef ::xsd::cxx::tree::traits< orientation_type, char > orientation_traits;

        const orientation_type&
        orientation () const;

        orientation_type&
        orientation ();

        void
        orientation (const orientation_type& x);

        void
        orientation (::std::unique_ptr< orientation_type > p);

        // zOffset
        //
        typedef ::xml_schema::double_ zOffset_type;
        typedef ::xsd::cxx::tree::traits< zOffset_type, char, ::xsd::cxx::tree::schema_type::double_ > zOffset_traits;

        const zOffset_type&
        zOffset () const;

        zOffset_type&
        zOffset ();

        void
        zOffset (const zOffset_type& x);

        // country
        //
        typedef ::simulation::standard::opendrive_schema::e_countryCode country_type;
        typedef ::xsd::cxx::tree::optional< country_type > country_optional;
        typedef ::xsd::cxx::tree::traits< country_type, char > country_traits;

        const country_optional&
        country () const;

        country_optional&
        country ();

        void
        country (const country_type& x);

        void
        country (const country_optional& x);

        void
        country (::std::unique_ptr< country_type > p);

        // countryRevision
        //
        typedef ::xml_schema::string countryRevision_type;
        typedef ::xsd::cxx::tree::optional< countryRevision_type > countryRevision_optional;
        typedef ::xsd::cxx::tree::traits< countryRevision_type, char > countryRevision_traits;

        const countryRevision_optional&
        countryRevision () const;

        countryRevision_optional&
        countryRevision ();

        void
        countryRevision (const countryRevision_type& x);

        void
        countryRevision (const countryRevision_optional& x);

        void
        countryRevision (::std::unique_ptr< countryRevision_type > p);

        // type
        //
        typedef ::xml_schema::string type_type;
        typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

        const type_type&
        type () const;

        type_type&
        type ();

        void
        type (const type_type& x);

        void
        type (::std::unique_ptr< type_type > p);

        // subtype
        //
        typedef ::xml_schema::string subtype_type;
        typedef ::xsd::cxx::tree::traits< subtype_type, char > subtype_traits;

        const subtype_type&
        subtype () const;

        subtype_type&
        subtype ();

        void
        subtype (const subtype_type& x);

        void
        subtype (::std::unique_ptr< subtype_type > p);

        // value
        //
        typedef ::xml_schema::double_ value_type;
        typedef ::xsd::cxx::tree::optional< value_type > value_optional;
        typedef ::xsd::cxx::tree::traits< value_type, char, ::xsd::cxx::tree::schema_type::double_ > value_traits;

        const value_optional&
        value () const;

        value_optional&
        value ();

        void
        value (const value_type& x);

        void
        value (const value_optional& x);

        // unit
        //
        typedef ::simulation::standard::opendrive_schema::e_unit unit_type;
        typedef ::xsd::cxx::tree::optional< unit_type > unit_optional;
        typedef ::xsd::cxx::tree::traits< unit_type, char > unit_traits;

        const unit_optional&
        unit () const;

        unit_optional&
        unit ();

        void
        unit (const unit_type& x);

        void
        unit (const unit_optional& x);

        void
        unit (::std::unique_ptr< unit_type > p);

        // height
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero height_type;
        typedef ::xsd::cxx::tree::optional< height_type > height_optional;
        typedef ::xsd::cxx::tree::traits< height_type, char > height_traits;

        const height_optional&
        height () const;

        height_optional&
        height ();

        void
        height (const height_type& x);

        void
        height (const height_optional& x);

        void
        height (::std::unique_ptr< height_type > p);

        // width
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero width_type;
        typedef ::xsd::cxx::tree::optional< width_type > width_optional;
        typedef ::xsd::cxx::tree::traits< width_type, char > width_traits;

        const width_optional&
        width () const;

        width_optional&
        width ();

        void
        width (const width_type& x);

        void
        width (const width_optional& x);

        void
        width (::std::unique_ptr< width_type > p);

        // text
        //
        typedef ::xml_schema::string text_type;
        typedef ::xsd::cxx::tree::optional< text_type > text_optional;
        typedef ::xsd::cxx::tree::traits< text_type, char > text_traits;

        const text_optional&
        text () const;

        text_optional&
        text ();

        void
        text (const text_type& x);

        void
        text (const text_optional& x);

        void
        text (::std::unique_ptr< text_type > p);

        // hOffset
        //
        typedef ::xml_schema::double_ hOffset_type;
        typedef ::xsd::cxx::tree::optional< hOffset_type > hOffset_optional;
        typedef ::xsd::cxx::tree::traits< hOffset_type, char, ::xsd::cxx::tree::schema_type::double_ > hOffset_traits;

        const hOffset_optional&
        hOffset () const;

        hOffset_optional&
        hOffset ();

        void
        hOffset (const hOffset_type& x);

        void
        hOffset (const hOffset_optional& x);

        // pitch
        //
        typedef ::xml_schema::double_ pitch_type;
        typedef ::xsd::cxx::tree::optional< pitch_type > pitch_optional;
        typedef ::xsd::cxx::tree::traits< pitch_type, char, ::xsd::cxx::tree::schema_type::double_ > pitch_traits;

        const pitch_optional&
        pitch () const;

        pitch_optional&
        pitch ();

        void
        pitch (const pitch_type& x);

        void
        pitch (const pitch_optional& x);

        // roll
        //
        typedef ::xml_schema::double_ roll_type;
        typedef ::xsd::cxx::tree::optional< roll_type > roll_optional;
        typedef ::xsd::cxx::tree::traits< roll_type, char, ::xsd::cxx::tree::schema_type::double_ > roll_traits;

        const roll_optional&
        roll () const;

        roll_optional&
        roll ();

        void
        roll (const roll_type& x);

        void
        roll (const roll_optional& x);

        // Constructors.
        //
        t_road_signals_signal (const s_type&,
                               const t_type&,
                               const id_type&,
                               const dynamic_type&,
                               const orientation_type&,
                               const zOffset_type&,
                               const type_type&,
                               const subtype_type&);

        t_road_signals_signal (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

        t_road_signals_signal (const t_road_signals_signal& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

        virtual t_road_signals_signal*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_signals_signal&
        operator= (const t_road_signals_signal& x);

        virtual 
        ~t_road_signals_signal ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        validity_sequence validity_;
        dependency_sequence dependency_;
        reference_sequence reference_;
        positionRoad_optional positionRoad_;
        positionInertial_optional positionInertial_;
        include_sequence include_;
        userData_sequence userData_;
        dataQuality_sequence dataQuality_;
        ::xsd::cxx::tree::one< s_type > s_;
        ::xsd::cxx::tree::one< t_type > t_;
        ::xsd::cxx::tree::one< id_type > id_;
        name_optional name_;
        ::xsd::cxx::tree::one< dynamic_type > dynamic_;
        ::xsd::cxx::tree::one< orientation_type > orientation_;
        ::xsd::cxx::tree::one< zOffset_type > zOffset_;
        country_optional country_;
        countryRevision_optional countryRevision_;
        ::xsd::cxx::tree::one< type_type > type_;
        ::xsd::cxx::tree::one< subtype_type > subtype_;
        value_optional value_;
        unit_optional unit_;
        height_optional height_;
        width_optional width_;
        text_optional text_;
        hOffset_optional hOffset_;
        pitch_optional pitch_;
        roll_optional roll_;
      };

      class t_road_signals_signal_dependency: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // id
        //
        typedef ::xml_schema::string id_type;
        typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

        const id_type&
        id () const;

        id_type&
        id ();

        void
        id (const id_type& x);

        void
        id (::std::unique_ptr< id_type > p);

        // type
        //
        typedef ::xml_schema::string type_type;
        typedef ::xsd::cxx::tree::optional< type_type > type_optional;
        typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

        const type_optional&
        type () const;

        type_optional&
        type ();

        void
        type (const type_type& x);

        void
        type (const type_optional& x);

        void
        type (::std::unique_ptr< type_type > p);

        // Constructors.
        //
        t_road_signals_signal_dependency (const id_type&);

        t_road_signals_signal_dependency (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

        t_road_signals_signal_dependency (const t_road_signals_signal_dependency& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

        virtual t_road_signals_signal_dependency*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_signals_signal_dependency&
        operator= (const t_road_signals_signal_dependency& x);

        virtual 
        ~t_road_signals_signal_dependency ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< id_type > id_;
        type_optional type_;
      };

      class t_road_signals_signal_positionInertial: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // x
        //
        typedef ::xml_schema::double_ x_type;
        typedef ::xsd::cxx::tree::traits< x_type, char, ::xsd::cxx::tree::schema_type::double_ > x_traits;

        const x_type&
        x () const;

        x_type&
        x ();

        void
        x (const x_type& x);

        // y
        //
        typedef ::xml_schema::double_ y_type;
        typedef ::xsd::cxx::tree::traits< y_type, char, ::xsd::cxx::tree::schema_type::double_ > y_traits;

        const y_type&
        y () const;

        y_type&
        y ();

        void
        y (const y_type& x);

        // z
        //
        typedef ::xml_schema::double_ z_type;
        typedef ::xsd::cxx::tree::traits< z_type, char, ::xsd::cxx::tree::schema_type::double_ > z_traits;

        const z_type&
        z () const;

        z_type&
        z ();

        void
        z (const z_type& x);

        // hdg
        //
        typedef ::xml_schema::double_ hdg_type;
        typedef ::xsd::cxx::tree::traits< hdg_type, char, ::xsd::cxx::tree::schema_type::double_ > hdg_traits;

        const hdg_type&
        hdg () const;

        hdg_type&
        hdg ();

        void
        hdg (const hdg_type& x);

        // pitch
        //
        typedef ::xml_schema::double_ pitch_type;
        typedef ::xsd::cxx::tree::optional< pitch_type > pitch_optional;
        typedef ::xsd::cxx::tree::traits< pitch_type, char, ::xsd::cxx::tree::schema_type::double_ > pitch_traits;

        const pitch_optional&
        pitch () const;

        pitch_optional&
        pitch ();

        void
        pitch (const pitch_type& x);

        void
        pitch (const pitch_optional& x);

        // roll
        //
        typedef ::xml_schema::double_ roll_type;
        typedef ::xsd::cxx::tree::optional< roll_type > roll_optional;
        typedef ::xsd::cxx::tree::traits< roll_type, char, ::xsd::cxx::tree::schema_type::double_ > roll_traits;

        const roll_optional&
        roll () const;

        roll_optional&
        roll ();

        void
        roll (const roll_type& x);

        void
        roll (const roll_optional& x);

        // Constructors.
        //
        t_road_signals_signal_positionInertial (const x_type&,
                                                const y_type&,
                                                const z_type&,
                                                const hdg_type&);

        t_road_signals_signal_positionInertial (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

        t_road_signals_signal_positionInertial (const t_road_signals_signal_positionInertial& x,
                                                ::xml_schema::flags f = 0,
                                                ::xml_schema::container* c = 0);

        virtual t_road_signals_signal_positionInertial*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_signals_signal_positionInertial&
        operator= (const t_road_signals_signal_positionInertial& x);

        virtual 
        ~t_road_signals_signal_positionInertial ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< x_type > x_;
        ::xsd::cxx::tree::one< y_type > y_;
        ::xsd::cxx::tree::one< z_type > z_;
        ::xsd::cxx::tree::one< hdg_type > hdg_;
        pitch_optional pitch_;
        roll_optional roll_;
      };

      class t_road_signals_signal_positionRoad: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // roadId
        //
        typedef ::xml_schema::string roadId_type;
        typedef ::xsd::cxx::tree::traits< roadId_type, char > roadId_traits;

        const roadId_type&
        roadId () const;

        roadId_type&
        roadId ();

        void
        roadId (const roadId_type& x);

        void
        roadId (::std::unique_ptr< roadId_type > p);

        // s
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero s_type;
        typedef ::xsd::cxx::tree::traits< s_type, char > s_traits;

        const s_type&
        s () const;

        s_type&
        s ();

        void
        s (const s_type& x);

        void
        s (::std::unique_ptr< s_type > p);

        // t
        //
        typedef ::xml_schema::double_ t_type;
        typedef ::xsd::cxx::tree::traits< t_type, char, ::xsd::cxx::tree::schema_type::double_ > t_traits;

        const t_type&
        t () const;

        t_type&
        t ();

        void
        t (const t_type& x);

        // zOffset
        //
        typedef ::xml_schema::double_ zOffset_type;
        typedef ::xsd::cxx::tree::traits< zOffset_type, char, ::xsd::cxx::tree::schema_type::double_ > zOffset_traits;

        const zOffset_type&
        zOffset () const;

        zOffset_type&
        zOffset ();

        void
        zOffset (const zOffset_type& x);

        // hOffset
        //
        typedef ::xml_schema::double_ hOffset_type;
        typedef ::xsd::cxx::tree::traits< hOffset_type, char, ::xsd::cxx::tree::schema_type::double_ > hOffset_traits;

        const hOffset_type&
        hOffset () const;

        hOffset_type&
        hOffset ();

        void
        hOffset (const hOffset_type& x);

        // pitch
        //
        typedef ::xml_schema::double_ pitch_type;
        typedef ::xsd::cxx::tree::optional< pitch_type > pitch_optional;
        typedef ::xsd::cxx::tree::traits< pitch_type, char, ::xsd::cxx::tree::schema_type::double_ > pitch_traits;

        const pitch_optional&
        pitch () const;

        pitch_optional&
        pitch ();

        void
        pitch (const pitch_type& x);

        void
        pitch (const pitch_optional& x);

        // roll
        //
        typedef ::xml_schema::double_ roll_type;
        typedef ::xsd::cxx::tree::optional< roll_type > roll_optional;
        typedef ::xsd::cxx::tree::traits< roll_type, char, ::xsd::cxx::tree::schema_type::double_ > roll_traits;

        const roll_optional&
        roll () const;

        roll_optional&
        roll ();

        void
        roll (const roll_type& x);

        void
        roll (const roll_optional& x);

        // Constructors.
        //
        t_road_signals_signal_positionRoad (const roadId_type&,
                                            const s_type&,
                                            const t_type&,
                                            const zOffset_type&,
                                            const hOffset_type&);

        t_road_signals_signal_positionRoad (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

        t_road_signals_signal_positionRoad (const t_road_signals_signal_positionRoad& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

        virtual t_road_signals_signal_positionRoad*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_signals_signal_positionRoad&
        operator= (const t_road_signals_signal_positionRoad& x);

        virtual 
        ~t_road_signals_signal_positionRoad ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< roadId_type > roadId_;
        ::xsd::cxx::tree::one< s_type > s_;
        ::xsd::cxx::tree::one< t_type > t_;
        ::xsd::cxx::tree::one< zOffset_type > zOffset_;
        ::xsd::cxx::tree::one< hOffset_type > hOffset_;
        pitch_optional pitch_;
        roll_optional roll_;
      };

      class t_road_signals_signal_reference: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // elementType
        //
        typedef ::simulation::standard::opendrive_schema::e_road_signals_signal_reference_elementType elementType_type;
        typedef ::xsd::cxx::tree::traits< elementType_type, char > elementType_traits;

        const elementType_type&
        elementType () const;

        elementType_type&
        elementType ();

        void
        elementType (const elementType_type& x);

        void
        elementType (::std::unique_ptr< elementType_type > p);

        // elementId
        //
        typedef ::xml_schema::string elementId_type;
        typedef ::xsd::cxx::tree::traits< elementId_type, char > elementId_traits;

        const elementId_type&
        elementId () const;

        elementId_type&
        elementId ();

        void
        elementId (const elementId_type& x);

        void
        elementId (::std::unique_ptr< elementId_type > p);

        // type
        //
        typedef ::xml_schema::string type_type;
        typedef ::xsd::cxx::tree::optional< type_type > type_optional;
        typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

        const type_optional&
        type () const;

        type_optional&
        type ();

        void
        type (const type_type& x);

        void
        type (const type_optional& x);

        void
        type (::std::unique_ptr< type_type > p);

        // Constructors.
        //
        t_road_signals_signal_reference (const elementType_type&,
                                         const elementId_type&);

        t_road_signals_signal_reference (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

        t_road_signals_signal_reference (const t_road_signals_signal_reference& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

        virtual t_road_signals_signal_reference*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_signals_signal_reference&
        operator= (const t_road_signals_signal_reference& x);

        virtual 
        ~t_road_signals_signal_reference ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< elementType_type > elementType_;
        ::xsd::cxx::tree::one< elementId_type > elementId_;
        type_optional type_;
      };

      class t_road_signals_signalReference: public ::simulation::standard::opendrive_schema::_OpenDriveElement
      {
        public:
        // validity
        //
        typedef ::simulation::standard::opendrive_schema::t_road_objects_object_laneValidity validity_type;
        typedef ::xsd::cxx::tree::sequence< validity_type > validity_sequence;
        typedef validity_sequence::iterator validity_iterator;
        typedef validity_sequence::const_iterator validity_const_iterator;
        typedef ::xsd::cxx::tree::traits< validity_type, char > validity_traits;

        const validity_sequence&
        validity () const;

        validity_sequence&
        validity ();

        void
        validity (const validity_sequence& s);

        // include
        //
        typedef ::simulation::standard::opendrive_schema::t_include include_type;
        typedef ::xsd::cxx::tree::sequence< include_type > include_sequence;
        typedef include_sequence::iterator include_iterator;
        typedef include_sequence::const_iterator include_const_iterator;
        typedef ::xsd::cxx::tree::traits< include_type, char > include_traits;

        const include_sequence&
        include () const;

        include_sequence&
        include ();

        void
        include (const include_sequence& s);

        // userData
        //
        typedef ::simulation::standard::opendrive_schema::t_userData userData_type;
        typedef ::xsd::cxx::tree::sequence< userData_type > userData_sequence;
        typedef userData_sequence::iterator userData_iterator;
        typedef userData_sequence::const_iterator userData_const_iterator;
        typedef ::xsd::cxx::tree::traits< userData_type, char > userData_traits;

        const userData_sequence&
        userData () const;

        userData_sequence&
        userData ();

        void
        userData (const userData_sequence& s);

        // dataQuality
        //
        typedef ::simulation::standard::opendrive_schema::t_dataQuality dataQuality_type;
        typedef ::xsd::cxx::tree::sequence< dataQuality_type > dataQuality_sequence;
        typedef dataQuality_sequence::iterator dataQuality_iterator;
        typedef dataQuality_sequence::const_iterator dataQuality_const_iterator;
        typedef ::xsd::cxx::tree::traits< dataQuality_type, char > dataQuality_traits;

        const dataQuality_sequence&
        dataQuality () const;

        dataQuality_sequence&
        dataQuality ();

        void
        dataQuality (const dataQuality_sequence& s);

        // s
        //
        typedef ::simulation::standard::opendrive_schema::t_grEqZero s_type;
        typedef ::xsd::cxx::tree::traits< s_type, char > s_traits;

        const s_type&
        s () const;

        s_type&
        s ();

        void
        s (const s_type& x);

        void
        s (::std::unique_ptr< s_type > p);

        // t
        //
        typedef ::xml_schema::double_ t_type;
        typedef ::xsd::cxx::tree::traits< t_type, char, ::xsd::cxx::tree::schema_type::double_ > t_traits;

        const t_type&
        t () const;

        t_type&
        t ();

        void
        t (const t_type& x);

        // id
        //
        typedef ::xml_schema::string id_type;
        typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

        const id_type&
        id () const;

        id_type&
        id ();

        void
        id (const id_type& x);

        void
        id (::std::unique_ptr< id_type > p);

        // orientation
        //
        typedef ::simulation::standard::opendrive_schema::e_orientation orientation_type;
        typedef ::xsd::cxx::tree::traits< orientation_type, char > orientation_traits;

        const orientation_type&
        orientation () const;

        orientation_type&
        orientation ();

        void
        orientation (const orientation_type& x);

        void
        orientation (::std::unique_ptr< orientation_type > p);

        // Constructors.
        //
        t_road_signals_signalReference (const s_type&,
                                        const t_type&,
                                        const id_type&,
                                        const orientation_type&);

        t_road_signals_signalReference (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

        t_road_signals_signalReference (const t_road_signals_signalReference& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

        virtual t_road_signals_signalReference*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        t_road_signals_signalReference&
        operator= (const t_road_signals_signalReference& x);

        virtual 
        ~t_road_signals_signalReference ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        validity_sequence validity_;
        include_sequence include_;
        userData_sequence userData_;
        dataQuality_sequence dataQuality_;
        ::xsd::cxx::tree::one< s_type > s_;
        ::xsd::cxx::tree::one< t_type > t_;
        ::xsd::cxx::tree::one< id_type > id_;
        ::xsd::cxx::tree::one< orientation_type > orientation_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace simulation
{
  namespace standard
  {
    namespace opendrive_schema
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // DELIVERABLE_XSD_SCHEMA_OPENDRIVE_16_SIGNAL_HXX
